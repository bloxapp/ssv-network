{
  "language": "Solidity",
  "sources": {
    "contracts/ISSVNetwork.sol": {
      "content": "// File: contracts/ISSVNetwork.sol\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.2;\n\nimport \"./ISSVRegistry.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ISSVNetwork {\n    /**\n     * @dev Emitted when the account has been enabled.\n     * @param ownerAddress Operator's owner.\n     */\n    event AccountEnable(address indexed ownerAddress);\n\n    /**\n     * @dev Emitted when the account has been liquidated.\n     * @param ownerAddress Operator's owner.\n     */\n    event AccountLiquidation(address indexed ownerAddress);\n\n    /**\n     * @dev Emitted when the operator has been added.\n     * @param id operator's ID.\n     * @param name Operator's display name.\n     * @param ownerAddress Operator's ethereum address that can collect fees.\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\n     * @param fee Operator's initial fee.\n     */\n    event OperatorRegistration(\n        uint32 indexed id,\n        string name,\n        address indexed ownerAddress,\n        bytes publicKey,\n        uint256 fee\n    );\n\n    /**\n     * @dev Emitted when the operator has been removed.\n     * @param operatorId operator's ID.\n     * @param ownerAddress Operator's owner.\n     */\n    event OperatorRemoval(uint32 operatorId, address indexed ownerAddress);\n\n    event OperatorFeeDeclaration(\n        address indexed ownerAddress,\n        uint32 operatorId,\n        uint256 blockNumber,\n        uint256 fee\n    );\n\n    event DeclaredOperatorFeeCancelation(address indexed ownerAddress, uint32 operatorId);\n\n    /**\n     * @dev Emitted when an operator's fee is updated.\n     * @param ownerAddress Operator's owner.\n     * @param blockNumber from which block number.\n     * @param fee updated fee value.\n     */\n    event OperatorFeeExecution(\n        address indexed ownerAddress,\n        uint32 operatorId,\n        uint256 blockNumber,\n        uint256 fee\n    );\n\n    /**\n     * @dev Emitted when an operator's score is updated.\n     * @param operatorId operator's ID.\n     * @param ownerAddress Operator's owner.\n     * @param blockNumber from which block number.\n     * @param score updated score value.\n     */\n    event OperatorScoreUpdate(\n        uint32 operatorId,\n        address indexed ownerAddress,\n        uint256 blockNumber,\n        uint256 score\n    );\n\n    /**\n     * @dev Emitted when the validator has been added.\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\n     * @param publicKey The public key of a validator.\n     * @param operatorIds The operators public keys list for this validator.\n     * @param sharesPublicKeys The shared publick keys list for this validator.\n     * @param encryptedKeys The encrypted keys list for this validator.\n     */\n    event ValidatorRegistration(\n        address indexed ownerAddress,\n        bytes publicKey,\n        uint32[] operatorIds,\n        bytes[] sharesPublicKeys,\n        bytes[] encryptedKeys\n    );\n\n    /**\n     * @dev Emitted when the validator is removed.\n     * @param ownerAddress Validator's owner.\n     * @param publicKey The public key of a validator.\n     */\n    event ValidatorRemoval(address indexed ownerAddress, bytes publicKey);\n\n    /**\n     * @dev Emitted when an owner deposits funds.\n     * @param value Amount of tokens.\n     * @param ownerAddress Owner's address.\n     * @param senderAddress Sender's address.\n     */\n    event FundsDeposit(uint256 value, address indexed ownerAddress, address indexed senderAddress);\n\n    /**\n     * @dev Emitted when an owner withdraws funds.\n     * @param value Amount of tokens.\n     * @param ownerAddress Owner's address.\n     */\n    event FundsWithdrawal(uint256 value, address indexed ownerAddress);\n\n    /**\n     * @dev Emitted when the network fee is updated.\n     * @param oldFee The old fee\n     * @param newFee The new fee\n     */\n    event NetworkFeeUpdate(uint256 oldFee, uint256 newFee);\n\n    /**\n     * @dev Emitted when transfer fees are withdrawn.\n     * @param value The amount of tokens withdrawn.\n     * @param recipient The recipient address.\n     */\n    event NetworkFeesWithdrawal(uint256 value, address recipient);\n\n    event DeclareOperatorFeePeriodUpdate(uint256 value);\n\n    event ExecuteOperatorFeePeriodUpdate(uint256 value);\n\n    event LiquidationThresholdPeriodUpdate(uint256 value);\n\n    event OperatorFeeIncreaseLimitUpdate(uint256 value);\n\n    event ValidatorsPerOperatorLimitUpdate(uint256 value);\n\n    event RegisteredOperatorsPerAccountLimitUpdate(uint256 value);\n\n    event MinimumBlocksBeforeLiquidationUpdate(uint256 value);\n\n    event OperatorMaxFeeIncreaseUpdate(uint256 value);\n\n    /** errors */\n    error ValidatorWithPublicKeyNotExist();\n    error CallerNotValidatorOwner();\n    error OperatorWithPublicKeyNotExist();\n    error CallerNotOperatorOwner();\n    error FeeTooLow();\n    error FeeExceedsIncreaseLimit();\n    error NoPendingFeeChangeRequest();\n    error ApprovalNotWithinTimeframe();\n    error NotEnoughBalance();\n    error BurnRatePositive();\n    error AccountAlreadyEnabled();\n    error NegativeBalance();\n    error BelowMinimumBlockPeriod();\n    error ExceedManagingOperatorsPerAccountLimit();\n\n    /**\n     * @dev Initializes the contract.\n     * @param registryAddress_ The registry address.\n     * @param token_ The network token.\n     * @param minimumBlocksBeforeLiquidation_ The minimum blocks before liquidation.\n     * @param declareOperatorFeePeriod_ The period an operator needs to wait before they can approve their fee.\n     * @param executeOperatorFeePeriod_ The length of the period in which an operator can approve their fee.\n     */\n    function initialize(\n        ISSVRegistry registryAddress_,\n        IERC20 token_,\n        uint64 minimumBlocksBeforeLiquidation_,\n        uint64 operatorMaxFeeIncrease_,\n        uint64 declareOperatorFeePeriod_,\n        uint64 executeOperatorFeePeriod_\n    ) external;\n\n    /**\n     * @dev Registers a new operator.\n     * @param name Operator's display name.\n     * @param publicKey Operator's public key. Used to encrypt secret shares of validators keys.\n     */\n    function registerOperator(\n        string calldata name,\n        bytes calldata publicKey,\n        uint256 fee\n    ) external returns (uint32);\n\n    /**\n     * @dev Removes an operator.\n     * @param operatorId Operator's id.\n     */\n    function removeOperator(uint32 operatorId) external;\n\n    /**\n     * @dev Set operator's fee change request by public key.\n     * @param operatorId Operator's id.\n     * @param operatorFee The operator's updated fee.\n     */\n    function declareOperatorFee(uint32 operatorId, uint256 operatorFee) external;\n\n    function cancelDeclaredOperatorFee(uint32 operatorId) external;\n\n    function executeOperatorFee(uint32 operatorId) external;\n\n    /**\n     * @dev Updates operator's score by public key.\n     * @param operatorId Operator's id.\n     * @param score The operators's updated score.\n     */\n    function updateOperatorScore(uint32 operatorId, uint32 score) external;\n\n    /**\n     * @dev Registers a new validator.\n     * @param publicKey Validator public key.\n     * @param operatorIds Operator public keys.\n     * @param sharesPublicKeys Shares public keys.\n     * @param sharesEncrypted Encrypted private keys.\n     * @param amount Amount of tokens to deposit.\n     */\n    function registerValidator(\n        bytes calldata publicKey,\n        uint32[] calldata operatorIds,\n        bytes[] calldata sharesPublicKeys,\n        bytes[] calldata sharesEncrypted,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev Updates a validator.\n     * @param publicKey Validator public key.\n     * @param operatorIds Operator public keys.\n     * @param sharesPublicKeys Shares public keys.\n     * @param sharesEncrypted Encrypted private keys.\n     * @param amount Amount of tokens to deposit.\n     */\n    function updateValidator(\n        bytes calldata publicKey,\n        uint32[] calldata operatorIds,\n        bytes[] calldata sharesPublicKeys,\n        bytes[] calldata sharesEncrypted,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev Removes a validator.\n     * @param publicKey Validator's public key.\n     */\n    function removeValidator(bytes calldata publicKey) external;\n\n    /**\n     * @dev Deposits tokens for the sender.\n     * @param ownerAddress Owners' addresses.\n     * @param tokenAmount Tokens amount.\n     */\n    function deposit(address ownerAddress, uint256 tokenAmount) external;\n\n    /**\n     * @dev Withdraw tokens for the sender.\n     * @param tokenAmount Tokens amount.\n     */\n    function withdraw(uint256 tokenAmount) external;\n\n    /**\n     * @dev Withdraw total balance to the sender, deactivating their validators if necessary.\n     */\n    function withdrawAll() external;\n\n    /**\n     * @dev Liquidates multiple owners.\n     * @param ownerAddresses Owners' addresses.\n     */\n    function liquidate(address[] calldata ownerAddresses) external;\n\n    /**\n     * @dev Enables msg.sender account.\n     * @param amount Tokens amount.\n     */\n    function reactivateAccount(uint256 amount) external;\n\n    /**\n     * @dev Updates the number of blocks left for an owner before they can be liquidated.\n     * @param blocks The new value.\n     */\n    function updateLiquidationThresholdPeriod(uint64 blocks) external;\n\n    /**\n     * @dev Updates the maximum fee increase in pecentage.\n     * @param newOperatorMaxFeeIncrease The new value.\n     */\n    function updateOperatorFeeIncreaseLimit(uint64 newOperatorMaxFeeIncrease) external;\n\n    function updateDeclareOperatorFeePeriod(uint64 newDeclareOperatorFeePeriod) external;\n\n    function updateExecuteOperatorFeePeriod(uint64 newExecuteOperatorFeePeriod) external;\n\n    /**\n     * @dev Updates the network fee.\n     * @param fee the new fee\n     */\n    function updateNetworkFee(uint256 fee) external;\n\n    /**\n     * @dev Withdraws network fees.\n     * @param amount Amount to withdraw\n     */\n    function withdrawNetworkEarnings(uint256 amount) external;\n\n    /**\n     * @dev Gets total balance for an owner.\n     * @param ownerAddress Owner's address.\n     */\n    function getAddressBalance(address ownerAddress) external view returns (uint256);\n\n    function isLiquidated(address ownerAddress) external view returns (bool);\n\n    /**\n     * @dev Gets an operator by operator id.\n     * @param operatorId Operator's id.\n     */\n    function getOperatorById(uint32 operatorId)\n        external view\n        returns (\n            string memory,\n            address,\n            bytes memory,\n            uint256,\n            uint256,\n            uint256,\n            bool\n        );\n\n    /**\n     * @dev Gets a validator public keys by owner's address.\n     * @param ownerAddress Owner's Address.\n     */\n    function getValidatorsByOwnerAddress(address ownerAddress)\n        external view\n        returns (bytes[] memory);\n\n    /**\n     * @dev Gets operators list which are in use by validator.\n     * @param validatorPublicKey Validator's public key.\n     */\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\n        external view\n        returns (uint32[] memory);\n\n    function getOperatorDeclaredFee(uint32 operatorId) external view returns (uint256, uint256, uint256);\n\n    /**\n     * @dev Gets operator current fee.\n     * @param operatorId Operator's id.\n     */\n    function getOperatorFee(uint32 operatorId) external view returns (uint256);\n\n    /**\n     * @dev Gets the network fee for an address.\n     * @param ownerAddress Owner's address.\n     */\n    function addressNetworkFee(address ownerAddress) external view returns (uint256);\n\n    /**\n     * @dev Returns the burn rate of an owner, returns 0 if negative.\n     * @param ownerAddress Owner's address.\n     */\n    function getAddressBurnRate(address ownerAddress) external view returns (uint256);\n\n    /**\n     * @dev Check if an owner is liquidatable.\n     * @param ownerAddress Owner's address.\n     */\n    function isLiquidatable(address ownerAddress) external view returns (bool);\n\n    /**\n     * @dev Returns the network fee.\n     */\n    function getNetworkFee() external view returns (uint256);\n\n    /**\n     * @dev Gets the available network earnings\n     */\n    function getNetworkEarnings() external view returns (uint256);\n\n    /**\n     * @dev Returns the number of blocks left for an owner before they can be liquidated.\n     */\n    function getLiquidationThresholdPeriod() external view returns (uint256);\n\n    /**\n     * @dev Returns the maximum fee increase in pecentage\n     */\n     function getOperatorFeeIncreaseLimit() external view returns (uint256);\n\n     function getExecuteOperatorFeePeriod() external view returns (uint256);\n\n     function getDeclaredOperatorFeePeriod() external view returns (uint256);\n\n     function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\n}\n"
    },
    "contracts/ISSVRegistry.sol": {
      "content": "// File: contracts/ISSVRegistry.sol\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.2;\n\ninterface ISSVRegistry {\n    struct Oess {\n        uint32 operatorId;\n        bytes sharedPublicKey;\n        bytes encryptedKey;\n    }\n\n    /** errors */\n    error ExceedRegisteredOperatorsByAccountLimit();\n    error OperatorDeleted();\n    error ValidatorAlreadyExists();\n    error ExceedValidatorLimit();\n    error OperatorNotFound();\n    error InvalidPublicKeyLength();\n    error OessDataStructureInvalid();\n\n    /**\n     * @dev Initializes the contract\n     */\n    function initialize() external;\n\n    /**\n     * @dev Registers a new operator.\n     * @param name Operator's display name.\n     * @param ownerAddress Operator's ethereum address that can collect fees.\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\n     * @param fee The fee which the operator charges for each block.\n     */\n    function registerOperator(string calldata name, address ownerAddress, bytes calldata publicKey, uint64 fee) external returns (uint32);\n\n    /**\n     * @dev removes an operator.\n     * @param operatorId Operator id.\n     */\n    function removeOperator(uint32 operatorId) external;\n\n    /**\n     * @dev Updates an operator fee.\n     * @param operatorId Operator id.\n     * @param fee New operator fee.\n     */\n    function updateOperatorFee(\n        uint32 operatorId,\n        uint64 fee\n    ) external;\n\n    /**\n     * @dev Updates an operator fee.\n     * @param operatorId Operator id.\n     * @param score New score.\n     */\n    function updateOperatorScore(\n        uint32 operatorId,\n        uint32 score\n    ) external;\n\n    /**\n     * @dev Registers a new validator.\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\n     * @param publicKey Validator public key.\n     * @param operatorIds Operator ids.\n     * @param sharesPublicKeys Shares public keys.\n     * @param sharesEncrypted Encrypted private keys.\n     */\n    function registerValidator(\n        address ownerAddress,\n        bytes calldata publicKey,\n        uint32[] calldata operatorIds,\n        bytes[] calldata sharesPublicKeys,\n        bytes[] calldata sharesEncrypted\n    ) external;\n\n    /**\n     * @dev removes a validator.\n     * @param publicKey Validator's public key.\n     */\n    function removeValidator(bytes calldata publicKey) external;\n\n    function enableOwnerValidators(address ownerAddress) external;\n\n    function disableOwnerValidators(address ownerAddress) external;\n\n    function isLiquidated(address ownerAddress) external view returns (bool);\n\n    /**\n     * @dev Gets an operator by operator id.\n     * @param operatorId Operator id.\n     */\n    function getOperatorById(uint32 operatorId)\n        external view\n        returns (\n            string memory,\n            address,\n            bytes memory,\n            uint256,\n            uint256,\n            uint256,\n            bool\n        );\n\n    /**\n     * @dev Returns operators for owner.\n     * @param ownerAddress Owner's address.\n     */\n    function getOperatorsByOwnerAddress(address ownerAddress)\n        external view\n        returns (uint32[] memory);\n\n    /**\n     * @dev Gets operators list which are in use by validator.\n     * @param validatorPublicKey Validator's public key.\n     */\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\n        external view\n        returns (uint32[] memory);\n\n    /**\n     * @dev Gets operator's owner.\n     * @param operatorId Operator id.\n     */\n    function getOperatorOwner(uint32 operatorId) external view returns (address);\n\n    /**\n     * @dev Gets operator current fee.\n     * @param operatorId Operator id.\n     */\n    function getOperatorFee(uint32 operatorId)\n        external view\n        returns (uint64);\n\n    /**\n     * @dev Gets active validator count.\n     */\n    function activeValidatorCount() external view returns (uint32);\n\n    /**\n     * @dev Gets an validator by public key.\n     * @param publicKey Validator's public key.\n     */\n    function validators(bytes calldata publicKey)\n        external view\n        returns (\n            address,\n            bytes memory,\n            bool\n        );\n\n    /**\n     * @dev Gets a validator public keys by owner's address.\n     * @param ownerAddress Owner's Address.\n     */\n    function getValidatorsByAddress(address ownerAddress)\n        external view\n        returns (bytes[] memory);\n\n    /**\n     * @dev Get validator's owner.\n     * @param publicKey Validator's public key.\n     */\n    function getValidatorOwner(bytes calldata publicKey) external view returns (address);\n\n    /**\n     * @dev Get validators amount per operator.\n     * @param operatorId Operator public key\n     */\n    function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/SSVNetwork.sol": {
      "content": "// File: contracts/SSVNetwork.sol\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./utils/VersionedContract.sol\";\nimport \"./utils/Types.sol\";\nimport \"./ISSVNetwork.sol\";\n\ncontract SSVNetwork is OwnableUpgradeable, ISSVNetwork, VersionedContract {\n    using Types256 for uint256;\n    using Types64 for uint64;\n\n    struct OperatorData {\n        uint256 blockNumber;\n        uint64 earnings;\n        uint64 index;\n        uint256 indexBlockNumber;\n        uint32 activeValidatorCount;\n    }\n\n    struct OwnerData {\n        uint64 deposited;\n        uint64 withdrawn;\n        uint64 used;\n        uint64 networkFee;\n        uint64 networkFeeIndex;\n        uint32 activeValidatorCount;\n        bool validatorsDisabled;\n    }\n\n    struct OperatorInUse {\n        uint64 index;\n        uint64 used;\n        uint32 validatorCount;\n        uint32 indexInArray;\n        bool exists;\n    }\n\n    struct FeeChangeRequest {\n        uint64 fee;\n        uint256 approvalBeginTime;\n        uint256 approvalEndTime;\n    }\n\n    ISSVRegistry private _ssvRegistryContract;\n    IERC20 private _token;\n    uint64 private _minimumBlocksBeforeLiquidation;\n    uint64 private _operatorMaxFeeIncrease;\n\n    uint64 private _networkFee;\n    uint64 private _networkFeeIndex;\n    uint256 private _networkFeeIndexBlockNumber;\n    uint64 private _networkEarnings;\n    uint256 private _networkEarningsBlockNumber;\n    uint64 private _withdrawnFromTreasury;\n\n    mapping(uint32 => OperatorData) private _operatorDatas;\n    mapping(address => OwnerData) private _owners;\n    mapping(address => mapping(uint32 => OperatorInUse)) private _operatorsInUseByAddress;\n    mapping(address => uint32[]) private _operatorsInUseList;\n\n    uint64 private _declareOperatorFeePeriod;\n    uint64 private _executeOperatorFeePeriod;\n    mapping(uint32 => FeeChangeRequest) private _feeChangeRequests;\n\n    uint16 constant private MINIMAL_OPERATOR_FEE = 1000;\n    uint16 constant private MANAGING_OPERATORS_PER_ACCOUNT_LIMIT = 50;\n    uint16 constant private MINIMAL_LIQUIDATION_THRESHOLD = 6570;\n\n    function initialize(\n        ISSVRegistry registryAddress_,\n        IERC20 token_,\n        uint64 minimumBlocksBeforeLiquidation_,\n        uint64 operatorMaxFeeIncrease_,\n        uint64 declareOperatorFeePeriod_,\n        uint64 executeOperatorFeePeriod_\n    ) external initializer override {\n        __SSVNetwork_init(registryAddress_, token_, minimumBlocksBeforeLiquidation_, operatorMaxFeeIncrease_, declareOperatorFeePeriod_, executeOperatorFeePeriod_);\n    }\n\n    function __SSVNetwork_init(\n        ISSVRegistry registryAddress_,\n        IERC20 token_,\n        uint64 minimumBlocksBeforeLiquidation_,\n        uint64 operatorMaxFeeIncrease_,\n        uint64 declareOperatorFeePeriod_,\n        uint64 executeOperatorFeePeriod_\n    ) internal initializer {\n        __Ownable_init_unchained();\n        __SSVNetwork_init_unchained(registryAddress_, token_, minimumBlocksBeforeLiquidation_, operatorMaxFeeIncrease_, declareOperatorFeePeriod_, executeOperatorFeePeriod_);\n    }\n\n    function __SSVNetwork_init_unchained(\n        ISSVRegistry registryAddress_,\n        IERC20 token_,\n        uint64 minimumBlocksBeforeLiquidation_,\n        uint64 operatorMaxFeeIncrease_,\n        uint64 declareOperatorFeePeriod_,\n        uint64 executeOperatorFeePeriod_\n    ) internal onlyInitializing {\n        _ssvRegistryContract = registryAddress_;\n        _token = token_;\n        _updateLiquidationThresholdPeriod(minimumBlocksBeforeLiquidation_);\n        _updateOperatorFeeIncreaseLimit(operatorMaxFeeIncrease_);\n        _updateDeclareOperatorFeePeriod(declareOperatorFeePeriod_);\n        _updateExecuteOperatorFeePeriod(executeOperatorFeePeriod_);\n        // _ssvRegistryContract.initialize();\n    }\n\n    modifier onlyValidatorOwnerOrContractOwner(bytes calldata publicKey) {\n        _onlyValidatorOwnerOrContractOwner(publicKey);\n        _;\n    }\n\n    modifier onlyOperatorOwnerOrContractOwner(uint32 operatorId) {\n        _onlyOperatorOwnerOrContractOwner(operatorId);\n        _;\n    }\n\n    modifier ensureMinimalOperatorFee(uint256 fee) {\n        _ensureMinimalOperatorFee(fee.shrink());\n        _;\n    }\n\n    /**\n     * @dev See {ISSVNetwork-registerOperator}.\n     */\n    function registerOperator(\n        string calldata name,\n        bytes calldata publicKey,\n        uint256 fee\n    ) ensureMinimalOperatorFee(fee) external override returns (uint32 operatorId) {\n        operatorId = _ssvRegistryContract.registerOperator(\n            name,\n            msg.sender,\n            publicKey,\n            fee.shrink()\n        );\n\n        _operatorDatas[operatorId] = OperatorData({ blockNumber: block.number, earnings: 0, index: 0, indexBlockNumber: block.number, activeValidatorCount: 0 });\n        emit OperatorRegistration(operatorId, name, msg.sender, publicKey, fee.shrink().expand());\n    }\n\n    /**\n     * @dev See {ISSVNetwork-removeOperator}.\n     */\n    function removeOperator(uint32 operatorId) onlyOperatorOwnerOrContractOwner(operatorId) external override {\n        address owner = _ssvRegistryContract.getOperatorOwner(operatorId);\n\n        _updateOperatorFeeUnsafe(operatorId, 0);\n        _ssvRegistryContract.removeOperator(operatorId);\n\n        emit OperatorRemoval(operatorId, owner);\n    }\n\n    function declareOperatorFee(uint32 operatorId, uint256 operatorFee) onlyOperatorOwnerOrContractOwner(operatorId) ensureMinimalOperatorFee(operatorFee) external override {\n        if (operatorFee.shrink() > _ssvRegistryContract.getOperatorFee(operatorId) * (10000 + _operatorMaxFeeIncrease) / 10000) {\n            revert FeeExceedsIncreaseLimit();\n        }\n        _feeChangeRequests[operatorId] = FeeChangeRequest(operatorFee.shrink(), block.timestamp + _declareOperatorFeePeriod, block.timestamp + _declareOperatorFeePeriod + _executeOperatorFeePeriod);\n\n        emit OperatorFeeDeclaration(msg.sender, operatorId, block.number, operatorFee);\n    }\n\n    function cancelDeclaredOperatorFee(uint32 operatorId) onlyOperatorOwnerOrContractOwner(operatorId) external override {\n        delete _feeChangeRequests[operatorId];\n\n        emit DeclaredOperatorFeeCancelation(msg.sender, operatorId);\n    }\n\n    function executeOperatorFee(uint32 operatorId) onlyOperatorOwnerOrContractOwner(operatorId) external override {\n        FeeChangeRequest storage feeChangeRequest = _feeChangeRequests[operatorId];\n\n        if(feeChangeRequest.fee == 0) {\n            revert NoPendingFeeChangeRequest();\n        }\n        if(block.timestamp < feeChangeRequest.approvalBeginTime || block.timestamp > feeChangeRequest.approvalEndTime) {\n            revert ApprovalNotWithinTimeframe();\n        }\n\n        _updateOperatorFeeUnsafe(operatorId, feeChangeRequest.fee);\n\n        emit OperatorFeeExecution(msg.sender, operatorId, block.number, feeChangeRequest.fee.expand());\n\n        delete _feeChangeRequests[operatorId];\n    }\n\n    function updateOperatorScore(uint32 operatorId, uint32 score) onlyOwner external override {\n        _ssvRegistryContract.updateOperatorScore(operatorId, score);\n\n        emit OperatorScoreUpdate(operatorId, msg.sender, block.number, score);\n    }\n\n    /**\n     * @dev See {ISSVNetwork-registerValidator}.\n     */\n    function registerValidator(\n        bytes calldata publicKey,\n        uint32[] calldata operatorIds,\n        bytes[] calldata sharesPublicKeys,\n        bytes[] calldata sharesEncrypted,\n        uint256 amount\n    ) external override {\n        _updateNetworkEarnings();\n        _updateAddressNetworkFee(msg.sender);\n        _registerValidatorUnsafe(msg.sender, publicKey, operatorIds, sharesPublicKeys, sharesEncrypted, amount);\n    }\n\n    /**\n     * @dev See {ISSVNetwork-updateValidator}.\n     */\n    function updateValidator(\n        bytes calldata publicKey,\n        uint32[] calldata operatorIds,\n        bytes[] calldata sharesPublicKeys,\n        bytes[] calldata sharesEncrypted,\n        uint256 amount\n    ) onlyValidatorOwnerOrContractOwner(publicKey) external override {\n        _removeValidatorUnsafe(msg.sender, publicKey);\n        _registerValidatorUnsafe(msg.sender, publicKey, operatorIds, sharesPublicKeys, sharesEncrypted, amount);\n    }\n\n    /**\n     * @dev See {ISSVNetwork-removeValidator}.\n     */\n    function removeValidator(bytes calldata publicKey) onlyValidatorOwnerOrContractOwner(publicKey) external override {\n        _updateNetworkEarnings();\n        _updateAddressNetworkFee(msg.sender);\n        _removeValidatorUnsafe(msg.sender, publicKey);\n        _totalBalanceOf(msg.sender); // For assertion\n    }\n\n    function deposit(address ownerAddress, uint256 amount) external override {\n        _deposit(ownerAddress, amount);\n    }\n\n    function withdraw(uint256 amount) external override {\n        if(_totalBalanceOf(msg.sender) < amount.shrink()) {\n            revert NotEnoughBalance();\n        }\n\n        _withdrawUnsafe(amount.shrink());\n\n        if(_liquidatable(msg.sender)) {\n            revert NotEnoughBalance();\n        }\n    }\n\n    function withdrawAll() external override {\n        if(_burnRate(msg.sender) > 0) {\n            revert BurnRatePositive();\n        }\n\n        _withdrawUnsafe(_totalBalanceOf(msg.sender));\n    }\n\n    function liquidate(address[] calldata ownerAddresses) external override {\n        uint64 balanceToTransfer = 0;\n\n        for (uint32 index = 0; index < ownerAddresses.length; ++index) {\n            if (_canLiquidate(ownerAddresses[index])) {\n                balanceToTransfer += _liquidateUnsafe(ownerAddresses[index]);\n            }\n        }\n\n        _token.transfer(msg.sender, balanceToTransfer.expand());\n    }\n\n    function reactivateAccount(uint256 amount) external override {\n        if (!_owners[msg.sender].validatorsDisabled) {\n            revert AccountAlreadyEnabled();\n        }\n\n        _deposit(msg.sender, amount);\n\n        _enableOwnerValidatorsUnsafe(msg.sender);\n\n        if(_liquidatable(msg.sender)) {\n            revert NotEnoughBalance();\n        }\n\n        emit AccountEnable(msg.sender);\n    }\n\n    function updateLiquidationThresholdPeriod(uint64 blocks) external onlyOwner override {\n        if(blocks < MINIMAL_LIQUIDATION_THRESHOLD) {\n            revert BelowMinimumBlockPeriod();\n        }\n\n        _updateLiquidationThresholdPeriod(blocks);\n    }\n\n    function updateOperatorFeeIncreaseLimit(uint64 newOperatorMaxFeeIncrease) external onlyOwner override {\n        _updateOperatorFeeIncreaseLimit(newOperatorMaxFeeIncrease);\n    }\n\n    function updateDeclareOperatorFeePeriod(uint64 newDeclareOperatorFeePeriod) external onlyOwner override {\n        _updateDeclareOperatorFeePeriod(newDeclareOperatorFeePeriod);\n    }\n\n    function updateExecuteOperatorFeePeriod(uint64 newExecuteOperatorFeePeriod) external onlyOwner override {\n        _updateExecuteOperatorFeePeriod(newExecuteOperatorFeePeriod);\n    }\n\n    /**\n     * @dev See {ISSVNetwork-updateNetworkFee}.\n     */\n    function updateNetworkFee(uint256 fee) external onlyOwner override {\n        emit NetworkFeeUpdate(_networkFee.expand(), fee);\n        _updateNetworkEarnings();\n        _updateNetworkFeeIndex();\n        _networkFee = fee.shrink();\n    }\n\n    function withdrawNetworkEarnings(uint256 amount) external onlyOwner override {\n        if(amount.shrink() > _getNetworkEarnings()) {\n            revert NotEnoughBalance();\n        }\n\n        _withdrawnFromTreasury += amount.shrink();\n        _token.transfer(msg.sender, amount);\n\n        emit NetworkFeesWithdrawal(amount, msg.sender);\n    }\n\n    function getAddressBalance(address ownerAddress) external override view returns (uint256) {\n        return _totalBalanceOf(ownerAddress).expand();\n    }\n\n    function isLiquidated(address ownerAddress) external view override returns (bool) {\n        return _owners[ownerAddress].validatorsDisabled;\n    }\n\n    /**\n     * @dev See {ISSVNetwork-getOperatorById}.\n     */\n    function getOperatorById(uint32 operatorId) external view override returns (string memory, address, bytes memory, uint256, uint256, uint256, bool) {\n        return _ssvRegistryContract.getOperatorById(operatorId);\n    }\n\n    function getOperatorDeclaredFee(uint32 operatorId) external view override returns (uint256, uint256, uint256) {\n        FeeChangeRequest storage feeChangeRequest = _feeChangeRequests[operatorId];\n\n        return (feeChangeRequest.fee.expand(), feeChangeRequest.approvalBeginTime, feeChangeRequest.approvalEndTime);\n    }\n\n    /**\n     * @dev See {ISSVNetwork-getOperatorFee}.\n     */\n    function getOperatorFee(uint32 operatorId) external view override returns (uint256) {\n        return _ssvRegistryContract.getOperatorFee(operatorId).expand();\n    }\n\n    /**\n     * @dev See {ISSVNetwork-getOperatorsByValidator}.\n     */\n    function getOperatorsByValidator(bytes memory publicKey) external view override returns (uint32[] memory) {\n        return _ssvRegistryContract.getOperatorsByValidator(publicKey);\n    }\n\n    /**\n     * @dev See {ISSVNetwork-getValidatorsByAddress}.\n     */\n    function getValidatorsByOwnerAddress(address ownerAddress) external view override returns (bytes[] memory) {\n        return _ssvRegistryContract.getValidatorsByAddress(ownerAddress);\n    }\n\n    /**\n     * @dev See {ISSVNetwork-addressNetworkFee}.\n     */\n    function addressNetworkFee(address ownerAddress) external view override returns (uint256) {\n        return _addressNetworkFee(ownerAddress);\n    }\n\n    function getAddressBurnRate(address ownerAddress) external view override returns (uint256) {\n        return _burnRate(ownerAddress).expand();\n    }\n\n    function isLiquidatable(address ownerAddress) external view override returns (bool) {\n        return _liquidatable(ownerAddress);\n    }\n\n    function getNetworkFee() external view override returns (uint256) {\n        return _networkFee.expand();\n    }\n\n    function getNetworkEarnings() external view override returns (uint256) {\n        return _getNetworkEarnings().expand();\n    }\n\n    function getLiquidationThresholdPeriod() external view override returns (uint256) {\n        return _minimumBlocksBeforeLiquidation;\n    }\n\n    function getOperatorFeeIncreaseLimit() external view override returns (uint256) {\n        return _operatorMaxFeeIncrease;\n    }\n\n    function getExecuteOperatorFeePeriod() external view override returns (uint256) {\n        return _executeOperatorFeePeriod;\n    }\n\n    function getDeclaredOperatorFeePeriod() external view override returns (uint256) {\n        return _declareOperatorFeePeriod;\n    }\n\n    function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32) {\n        return _ssvRegistryContract.validatorsPerOperatorCount(operatorId);\n    }\n\n    function _deposit(address ownerAddress, uint256 amount) private {\n        _token.transferFrom(msg.sender, address(this), amount);\n        _owners[ownerAddress].deposited += amount.shrink();\n\n        emit FundsDeposit(amount, ownerAddress, msg.sender);\n    }\n\n    function _withdrawUnsafe(uint64 amount) private {\n        _owners[msg.sender].withdrawn += amount;\n        _token.transfer(msg.sender, amount.expand());\n\n        emit FundsWithdrawal(amount.expand(), msg.sender);\n    }\n\n    /**\n     * @dev Update network fee for the address.\n     * @param ownerAddress Owner address.\n     */\n    function _updateAddressNetworkFee(address ownerAddress) private {\n        _owners[ownerAddress].networkFee = _addressNetworkFee(ownerAddress);\n        _owners[ownerAddress].networkFeeIndex = _currentNetworkFeeIndex();\n    }\n\n    function _updateOperatorIndex(uint32 operatorId) private {\n        _operatorDatas[operatorId].index = _operatorIndexOf(operatorId);\n    }\n\n    /**\n     * @dev Updates operators's balance.\n     */\n    function _updateOperatorBalance(uint32 operatorId) private {\n        OperatorData storage operatorData = _operatorDatas[operatorId];\n        operatorData.earnings = _operatorEarningsOf(operatorId);\n        operatorData.blockNumber = block.number;\n    }\n\n    function _liquidateUnsafe(address ownerAddress) private returns (uint64) {\n        _disableOwnerValidatorsUnsafe(ownerAddress);\n\n        uint64 balanceToTransfer = _totalBalanceOf(ownerAddress);\n\n        _owners[ownerAddress].used += balanceToTransfer;\n\n        emit AccountLiquidation(ownerAddress);\n\n        return balanceToTransfer;\n    }\n\n    function _updateNetworkEarnings() private {\n        _networkEarnings = _getTotalNetworkEarnings();\n        _networkEarningsBlockNumber = block.number;\n    }\n\n    function _updateNetworkFeeIndex() private {\n        _networkFeeIndex = _currentNetworkFeeIndex();\n        _networkFeeIndexBlockNumber = block.number;\n    }\n\n    function _registerValidatorUnsafe(\n        address ownerAddress,\n        bytes calldata publicKey,\n        uint32[] calldata operatorIds,\n        bytes[] calldata sharesPublicKeys,\n        bytes[] calldata encryptedKeys,\n        uint256 tokenAmount) private {\n\n        _ssvRegistryContract.registerValidator(\n            ownerAddress,\n            publicKey,\n            operatorIds,\n            sharesPublicKeys,\n            encryptedKeys\n        );\n\n        OwnerData storage owner = _owners[ownerAddress];\n\n        if (!owner.validatorsDisabled) {\n            ++owner.activeValidatorCount;\n        }\n\n        for (uint32 index = 0; index < operatorIds.length; ++index) {\n            uint32 operatorId = operatorIds[index];\n            _updateOperatorBalance(operatorId);\n\n            if (!owner.validatorsDisabled) {\n                ++_operatorDatas[operatorId].activeValidatorCount;\n            }\n\n            _useOperatorByOwner(ownerAddress, operatorId);\n        }\n        if (tokenAmount > 0) {\n            _deposit(msg.sender, tokenAmount);\n        }\n\n        if(_liquidatable(ownerAddress)) {\n            revert NotEnoughBalance();\n        }\n\n        emit ValidatorRegistration(ownerAddress, publicKey, operatorIds, sharesPublicKeys, encryptedKeys);\n    }\n\n    function _removeValidatorUnsafe(address ownerAddress, bytes memory publicKey) private {\n        _unregisterValidator(ownerAddress, publicKey);\n        _ssvRegistryContract.removeValidator(publicKey);\n\n        if (!_owners[ownerAddress].validatorsDisabled) {\n            --_owners[ownerAddress].activeValidatorCount;\n        }\n\n        emit ValidatorRemoval(ownerAddress, publicKey);\n    }\n\n    function _unregisterValidator(address ownerAddress, bytes memory publicKey) private {\n        // calculate balances for current operators in use and update their balances\n        uint32[] memory currentOperatorIds = _ssvRegistryContract.getOperatorsByValidator(publicKey);\n        for (uint32 index = 0; index < currentOperatorIds.length; ++index) {\n            uint32 operatorId = currentOperatorIds[index];\n            _updateOperatorBalance(operatorId);\n\n            if (!_owners[ownerAddress].validatorsDisabled) {\n                --_operatorDatas[operatorId].activeValidatorCount;\n            }\n\n            _stopUsingOperatorByOwner(ownerAddress, operatorId);\n        }\n    }\n\n    function _useOperatorByOwner(address ownerAddress, uint32 operatorId) private {\n        _updateUsingOperatorByOwner(ownerAddress, operatorId, true);\n    }\n\n    function _stopUsingOperatorByOwner(address ownerAddress, uint32 operatorId) private {\n        _updateUsingOperatorByOwner(ownerAddress, operatorId, false);\n    }\n\n    function _updateOperatorFeeUnsafe(uint32 operatorId, uint64 fee) private {\n        OperatorData storage operatorData = _operatorDatas[operatorId];\n        _updateOperatorIndex(operatorId);\n        operatorData.indexBlockNumber = block.number;\n        _updateOperatorBalance(operatorId);\n        _ssvRegistryContract.updateOperatorFee(operatorId, fee);\n    }\n\n    /**\n     * @dev Updates the relation between operator and owner\n     * @param ownerAddress Owner address.\n     * @param increase Change value for validators amount.\n     */\n    function _updateUsingOperatorByOwner(address ownerAddress, uint32 operatorId, bool increase) private {\n        OperatorInUse storage operatorInUseData = _operatorsInUseByAddress[ownerAddress][operatorId];\n\n        if (operatorInUseData.exists) {\n            _updateOperatorUsageByOwner(operatorInUseData, ownerAddress, operatorId);\n\n            if (increase) {\n                ++operatorInUseData.validatorCount;\n            } else {\n                if (--operatorInUseData.validatorCount == 0) {\n                    _owners[ownerAddress].used += operatorInUseData.used;\n\n                    // remove from mapping and list;\n\n                    _operatorsInUseList[ownerAddress][operatorInUseData.indexInArray] = _operatorsInUseList[ownerAddress][_operatorsInUseList[ownerAddress].length - 1];\n                    _operatorsInUseByAddress[ownerAddress][_operatorsInUseList[ownerAddress][operatorInUseData.indexInArray]].indexInArray = operatorInUseData.indexInArray;\n                    _operatorsInUseList[ownerAddress].pop();\n\n                    delete _operatorsInUseByAddress[ownerAddress][operatorId];\n                }\n            }\n        } else {\n            if (_operatorsInUseList[ownerAddress].length > MANAGING_OPERATORS_PER_ACCOUNT_LIMIT) {\n                revert ExceedManagingOperatorsPerAccountLimit();\n            }\n\n            _operatorsInUseByAddress[ownerAddress][operatorId] = OperatorInUse({ index: _operatorIndexOf(operatorId), validatorCount: 1, used: 0, exists: true, indexInArray: uint32(_operatorsInUseList[ownerAddress].length) });\n            _operatorsInUseList[ownerAddress].push(operatorId);\n        }\n    }\n\n    function _disableOwnerValidatorsUnsafe(address ownerAddress) private {\n        _updateNetworkEarnings();\n        _updateAddressNetworkFee(ownerAddress);\n\n        for (uint32 index = 0; index < _operatorsInUseList[ownerAddress].length; ++index) {\n            uint32 operatorId = _operatorsInUseList[ownerAddress][index];\n            _updateOperatorBalance(operatorId);\n            OperatorInUse storage operatorInUseData = _operatorsInUseByAddress[ownerAddress][operatorId];\n            _updateOperatorUsageByOwner(operatorInUseData, ownerAddress, operatorId);\n            _operatorDatas[operatorId].activeValidatorCount -= operatorInUseData.validatorCount;\n        }\n\n        _ssvRegistryContract.disableOwnerValidators(ownerAddress);\n\n        _owners[ownerAddress].validatorsDisabled = true;\n    }\n\n    function _enableOwnerValidatorsUnsafe(address ownerAddress) private {\n        _updateNetworkEarnings();\n        _updateAddressNetworkFee(ownerAddress);\n\n        for (uint32 index = 0; index < _operatorsInUseList[ownerAddress].length; ++index) {\n            uint32 operatorId = _operatorsInUseList[ownerAddress][index];\n            _updateOperatorBalance(operatorId);\n            OperatorInUse storage operatorInUseData = _operatorsInUseByAddress[ownerAddress][operatorId];\n            _updateOperatorUsageByOwner(operatorInUseData, ownerAddress, operatorId);\n            _operatorDatas[operatorId].activeValidatorCount += operatorInUseData.validatorCount;\n        }\n\n        _ssvRegistryContract.enableOwnerValidators(ownerAddress);\n\n        _owners[ownerAddress].validatorsDisabled = false;\n    }\n\n    function _updateOperatorUsageByOwner(OperatorInUse storage operatorInUseData, address ownerAddress, uint32 operatorId) private {\n        operatorInUseData.used = _operatorInUseUsageOf(operatorInUseData, ownerAddress, operatorId);\n        operatorInUseData.index = _operatorIndexOf(operatorId);\n    }\n\n    function _updateLiquidationThresholdPeriod(uint64 newMinimumBlocksBeforeLiquidation) private {\n        _minimumBlocksBeforeLiquidation = newMinimumBlocksBeforeLiquidation;\n\n        emit LiquidationThresholdPeriodUpdate(_minimumBlocksBeforeLiquidation);\n    }\n\n    function _updateOperatorFeeIncreaseLimit(uint64 newOperatorMaxFeeIncrease) private {\n        _operatorMaxFeeIncrease = newOperatorMaxFeeIncrease;\n\n        emit OperatorFeeIncreaseLimitUpdate(_operatorMaxFeeIncrease);\n\n    }\n\n    function _updateDeclareOperatorFeePeriod(uint64 newDeclareOperatorFeePeriod) private {\n        _declareOperatorFeePeriod = newDeclareOperatorFeePeriod;\n\n        emit DeclareOperatorFeePeriodUpdate(newDeclareOperatorFeePeriod);\n    }\n\n    function _updateExecuteOperatorFeePeriod(uint64 newExecuteOperatorFeePeriod) private {\n        _executeOperatorFeePeriod = newExecuteOperatorFeePeriod;\n\n        emit ExecuteOperatorFeePeriodUpdate(newExecuteOperatorFeePeriod);\n    }\n\n    function _expensesOf(address ownerAddress) private view returns(uint64) {\n        uint64 usage =  _owners[ownerAddress].used + _addressNetworkFee(ownerAddress);\n        for (uint32 index = 0; index < _operatorsInUseList[ownerAddress].length; ++index) {\n            OperatorInUse storage operatorInUseData = _operatorsInUseByAddress[ownerAddress][_operatorsInUseList[ownerAddress][index]];\n            usage += _operatorInUseUsageOf(operatorInUseData, ownerAddress, _operatorsInUseList[ownerAddress][index]);\n        }\n\n        return usage;\n    }\n\n    function _totalEarningsOf(address ownerAddress) private view returns (uint64) {\n        uint64 earnings = 0;\n        uint32[] memory operatorsByOwner = _ssvRegistryContract.getOperatorsByOwnerAddress(ownerAddress);\n        for (uint32 index = 0; index < operatorsByOwner.length; ++index) {\n            earnings += _operatorEarningsOf(operatorsByOwner[index]);\n        }\n\n        return earnings;\n    }\n\n    function _totalBalanceOf(address ownerAddress) private view returns (uint64) {\n        uint64 balance = _owners[ownerAddress].deposited + _totalEarningsOf(ownerAddress);\n\n        uint64 usage = _owners[ownerAddress].withdrawn + _expensesOf(ownerAddress);\n\n        if(balance < usage) {\n            revert NegativeBalance();\n        }\n\n        return balance - usage;\n    }\n\n    function _operatorEarnRate(uint32 operatorId) private view returns (uint64) {\n        return _ssvRegistryContract.getOperatorFee(operatorId) * _operatorDatas[operatorId].activeValidatorCount;\n    }\n\n    /**\n     * @dev See {ISSVNetwork-operatorEarningsOf}.\n     */\n    function _operatorEarningsOf(uint32 operatorId) private view returns (uint64) {\n        return _operatorDatas[operatorId].earnings +\n               uint64(block.number - _operatorDatas[operatorId].blockNumber) *\n               _operatorEarnRate(operatorId);\n    }\n\n    function _addressNetworkFee(address ownerAddress) private view returns (uint64) {\n        return _owners[ownerAddress].networkFee +\n              uint64(_currentNetworkFeeIndex() - _owners[ownerAddress].networkFeeIndex) *\n              _owners[ownerAddress].activeValidatorCount;\n    }\n\n    function _burnRate(address ownerAddress) private view returns (uint64 ownerBurnRate) {\n        if (_owners[ownerAddress].validatorsDisabled) {\n            return 0;\n        }\n\n        for (uint32 index = 0; index < _operatorsInUseList[ownerAddress].length; ++index) {\n            ownerBurnRate += _operatorInUseBurnRateWithNetworkFeeUnsafe(ownerAddress, _operatorsInUseList[ownerAddress][index]);\n        }\n\n        ownerBurnRate += _owners[ownerAddress].activeValidatorCount * _networkFee;\n\n        uint32[] memory operatorsByOwner = _ssvRegistryContract.getOperatorsByOwnerAddress(ownerAddress);\n\n        for (uint32 index = 0; index < operatorsByOwner.length; ++index) {\n            if (ownerBurnRate <= _operatorEarnRate(operatorsByOwner[index])) {\n                return 0;\n            } else {\n                ownerBurnRate -= _operatorEarnRate(operatorsByOwner[index]);\n            }\n        }\n    }\n\n    function _overdue(address ownerAddress) private view returns (bool) {\n        return _totalBalanceOf(ownerAddress) < _minimumBlocksBeforeLiquidation * _burnRate(ownerAddress);\n    }\n\n    function _liquidatable(address ownerAddress) private view returns (bool) {\n        return !_owners[ownerAddress].validatorsDisabled && _overdue(ownerAddress);\n    }\n\n    function _canLiquidate(address ownerAddress) private view returns (bool) {\n        return !_owners[ownerAddress].validatorsDisabled && (msg.sender == ownerAddress || _overdue(ownerAddress));\n    }\n\n    function _getTotalNetworkEarnings() private view returns (uint64) {\n        uint256 result = _networkEarnings + (block.number - _networkEarningsBlockNumber) * _networkFee * _ssvRegistryContract.activeValidatorCount();\n        return uint64(result);\n    }\n\n    function _getNetworkEarnings() private view returns (uint64) {\n        return _getTotalNetworkEarnings() - _withdrawnFromTreasury;\n    }\n\n    /**\n     * @dev Get operator index by address.\n     */\n    function _operatorIndexOf(uint32 operatorId) private view returns (uint64) {\n        return _operatorDatas[operatorId].index +\n               _ssvRegistryContract.getOperatorFee(operatorId) *\n               uint64(block.number - _operatorDatas[operatorId].indexBlockNumber);\n    }\n\n    function _operatorInUseUsageOf(OperatorInUse storage operatorInUseData, address ownerAddress, uint32 operatorId) private view returns (uint64) {\n        return operatorInUseData.used + (\n                _owners[ownerAddress].validatorsDisabled ? 0 :\n                uint64(_operatorIndexOf(operatorId) - operatorInUseData.index) * operatorInUseData.validatorCount\n               );\n    }\n\n    function _operatorInUseBurnRateWithNetworkFeeUnsafe(address ownerAddress, uint32 operatorId) private view returns (uint64) {\n        OperatorInUse storage operatorInUseData = _operatorsInUseByAddress[ownerAddress][operatorId];\n        return _ssvRegistryContract.getOperatorFee(operatorId) * operatorInUseData.validatorCount;\n    }\n\n    /**\n     * @dev Returns the current network fee index\n     */\n    function _currentNetworkFeeIndex() private view returns(uint64) {\n        return _networkFeeIndex + uint64(block.number - _networkFeeIndexBlockNumber) * _networkFee;\n    }\n\n    function _onlyValidatorOwnerOrContractOwner(bytes calldata publicKey) private view {\n        address validatorOwner = _ssvRegistryContract.getValidatorOwner(publicKey);\n        if (validatorOwner == address(0)) {\n            revert ValidatorWithPublicKeyNotExist();\n        }\n        if (msg.sender != validatorOwner && msg.sender != owner()) {\n            revert CallerNotValidatorOwner();\n        }\n    }\n\n    function _onlyOperatorOwnerOrContractOwner(uint32 operatorId) private view {\n        address operatorOwner = _ssvRegistryContract.getOperatorOwner(operatorId);\n\n        if(operatorOwner == address(0)) {\n            revert OperatorWithPublicKeyNotExist();\n        }\n\n        if(msg.sender != operatorOwner && msg.sender != owner()) {\n            revert CallerNotOperatorOwner();\n        }\n    }\n\n    function _ensureMinimalOperatorFee(uint64 fee) private pure {\n        if (fee < MINIMAL_OPERATOR_FEE) {\n            revert FeeTooLow();\n        }\n    }\n\n    function version() external pure override returns (uint32) {\n        return 20000;\n    }\n\n    uint256[50] ______gap;\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/utils/VersionedContract.sol": {
      "content": "// File: contracts/utils/VersionedContract.sol\n// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.2;\n\ninterface VersionedContract {\n  function version() external pure returns (uint32);\n}\n"
    },
    "contracts/utils/Types.sol": {
      "content": "// File: contracts/SSVNetwork.sol\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.2;\n\nuint64 constant DEDUCTED_DIGITS = 10000000;\n\nlibrary Types64 {\n  function expand(uint64 value) internal pure returns (uint256) {\n    return uint256(value) * DEDUCTED_DIGITS;\n  }\n}\n\nlibrary Types256 {\n  function shrink(uint256 value) internal pure returns (uint64) {\n    require(value % DEDUCTED_DIGITS == 0, \"Precision is over the maximum defined\");\n    return uint64(value / DEDUCTED_DIGITS);\n  }\n}"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/SSVRegistry.sol": {
      "content": "// File: contracts/SSVRegistry.sol\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./utils/VersionedContract.sol\";\nimport \"./utils/Types.sol\";\nimport \"./ISSVRegistry.sol\";\n\ncontract SSVRegistry is Initializable, OwnableUpgradeable, ISSVRegistry, VersionedContract {\n    using Counters for Counters.Counter;\n    using Types256 for uint256;\n    using Types64 for uint64;\n\n    struct Operator {\n        string name;\n        bytes publicKey;\n        uint64 fee;\n        address ownerAddress;\n        uint32 score;\n        uint32 indexInOwner;\n        uint32 validatorCount;\n        bool active;\n    }\n\n    struct Validator {\n        uint32[] operatorIds;\n        address ownerAddress;\n        uint32 indexInOwner;\n        bool active;\n    }\n\n    struct OwnerData {\n        uint32 activeValidatorCount;\n        bool validatorsDisabled;\n        bytes[] validators;\n    }\n\n\n    Counters.Counter private _lastOperatorId;\n\n    mapping(uint32 => Operator) private _operators;\n    mapping(bytes => Validator) private _validators;\n    mapping(address => uint32[]) private _operatorsByOwnerAddress;\n    mapping(address => OwnerData) private _owners;\n\n    uint32 private _activeValidatorCount;\n\n    uint32 constant private VALIDATORS_PER_OPERATOR_LIMIT = 2000;\n    uint32 constant private REGISTERED_OPERATORS_PER_ACCOUNT_LIMIT = 10;\n\n    /**\n     * @dev See {ISSVRegistry-initialize}.\n     */\n    function initialize() external override initializer {\n        __SSVRegistry_init();\n    }\n\n    function __SSVRegistry_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n        __SSVRegistry_init_unchained();\n    }\n\n    function __SSVRegistry_init_unchained() internal onlyInitializing {\n    }\n\n    /**\n     * @dev See {ISSVRegistry-registerOperator}.\n     */\n    function registerOperator(\n        string calldata name,\n        address ownerAddress,\n        bytes calldata publicKey,\n        uint64 fee\n    ) external onlyOwner override returns (uint32 operatorId) {\n\n        if (_operatorsByOwnerAddress[ownerAddress].length >= REGISTERED_OPERATORS_PER_ACCOUNT_LIMIT) {\n            revert ExceedRegisteredOperatorsByAccountLimit();\n        }\n\n        _lastOperatorId.increment();\n        operatorId = uint32(_lastOperatorId.current());\n        _operators[operatorId] = Operator({name: name, ownerAddress: ownerAddress, publicKey: publicKey, score: 0, fee: 0, active: true, indexInOwner: uint32(_operatorsByOwnerAddress[ownerAddress].length), validatorCount: 0});\n        _operatorsByOwnerAddress[ownerAddress].push(operatorId);\n        _updateOperatorFeeUnsafe(operatorId, fee);\n    }\n\n    /**\n     * @dev See {ISSVRegistry-removeOperator}.\n     */\n    function removeOperator(\n        uint32 operatorId\n    ) external onlyOwner override {\n        Operator storage operator = _operators[operatorId];\n\n        if (!operator.active) {\n            revert OperatorDeleted();\n        }\n\n        operator.active = false;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-updateOperatorFee}.\n     */\n    function updateOperatorFee(uint32 operatorId, uint64 fee) external onlyOwner override {\n        _updateOperatorFeeUnsafe(operatorId, fee);\n    }\n\n    /**\n     * @dev See {ISSVRegistry-updateOperatorScore}.\n     */\n    function updateOperatorScore(uint32 operatorId, uint32 score) external onlyOwner override {\n        Operator storage operator = _operators[operatorId];\n        operator.score = score;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-registerValidator}.\n     */\n    function registerValidator(\n        address ownerAddress,\n        bytes calldata publicKey,\n        uint32[] calldata operatorIds,\n        bytes[] calldata sharesPublicKeys,\n        bytes[] calldata sharesEncrypted\n    ) external onlyOwner override {\n        _validateValidatorParams(\n            publicKey,\n            operatorIds,\n            sharesPublicKeys,\n            sharesEncrypted\n        );\n\n        if (_validators[publicKey].ownerAddress != address(0)) {\n            revert ValidatorAlreadyExists();\n        }\n\n        _validators[publicKey] = Validator({\n            operatorIds: operatorIds,\n            ownerAddress: ownerAddress,\n            indexInOwner: uint32(_owners[ownerAddress].validators.length),\n            active: true\n        });\n\n        _owners[ownerAddress].validators.push(publicKey);\n\n        for (uint32 index = 0; index < operatorIds.length; ++index) {\n            if (!_operators[operatorIds[index]].active) {\n                revert OperatorDeleted();\n            }\n\n            if (++_operators[operatorIds[index]].validatorCount > VALIDATORS_PER_OPERATOR_LIMIT) {\n                revert ExceedValidatorLimit();\n            }\n        }\n        ++_activeValidatorCount;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-removeValidator}.\n     */\n    function removeValidator(\n        bytes calldata publicKey\n    ) external onlyOwner override {\n        Validator storage validator = _validators[publicKey];\n\n        for (uint32 index = 0; index < validator.operatorIds.length; ++index) {\n            --_operators[validator.operatorIds[index]].validatorCount;\n        }\n\n        bytes[] storage ownerValidators = _owners[validator.ownerAddress].validators;\n\n        ownerValidators[validator.indexInOwner] = ownerValidators[ownerValidators.length - 1];\n        _validators[ownerValidators[validator.indexInOwner]].indexInOwner = validator.indexInOwner;\n        ownerValidators.pop();\n\n        --_activeValidatorCount;\n\n        delete _validators[publicKey];\n    }\n\n    function enableOwnerValidators(address ownerAddress) external onlyOwner override {\n        _activeValidatorCount += _owners[ownerAddress].activeValidatorCount;\n        _owners[ownerAddress].validatorsDisabled = false;\n    }\n\n    function disableOwnerValidators(address ownerAddress) external onlyOwner override {\n        _activeValidatorCount -= _owners[ownerAddress].activeValidatorCount;\n        _owners[ownerAddress].validatorsDisabled = true;\n    }\n\n    function isLiquidated(address ownerAddress) external view override returns (bool) {\n        return _owners[ownerAddress].validatorsDisabled;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-operators}.\n     */\n    function getOperatorById(uint32 operatorId) external view override returns (string memory, address, bytes memory, uint256, uint256, uint256, bool) {\n        Operator storage operator = _operators[operatorId];\n        return (operator.name, operator.ownerAddress, operator.publicKey, _operators[operatorId].validatorCount, operator.fee.expand(), operator.score, operator.active);\n    }\n\n    /**\n     * @dev See {ISSVRegistry-getOperatorsByOwnerAddress}.\n     */\n    function getOperatorsByOwnerAddress(address ownerAddress) external view override returns (uint32[] memory) {\n        return _operatorsByOwnerAddress[ownerAddress];\n    }\n\n    /**\n     * @dev See {ISSVRegistry-getOperatorsByValidator}.\n     */\n    function getOperatorsByValidator(bytes calldata validatorPublicKey) external view override returns (uint32[] memory operatorIds) {\n        Validator storage validator = _validators[validatorPublicKey];\n\n        return validator.operatorIds;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-getOperatorOwner}.\n     */\n    function getOperatorOwner(uint32 operatorId) external view override returns (address) {\n        return _operators[operatorId].ownerAddress;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-getOperatorFee}.\n     */\n    function getOperatorFee(uint32 operatorId) external view override returns (uint64) {\n        if (_operators[operatorId].ownerAddress == address(0)) {\n            revert OperatorNotFound();\n        }\n        return _operators[operatorId].fee;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-activeValidatorCount}.\n     */\n    function activeValidatorCount() external view override returns (uint32) {\n        return _activeValidatorCount;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-validators}.\n     */\n    function validators(bytes calldata publicKey) external view override returns (address, bytes memory, bool) {\n        Validator storage validator = _validators[publicKey];\n\n        return (validator.ownerAddress, publicKey, validator.active);\n    }\n\n    /**\n     * @dev See {ISSVRegistry-getValidatorsByAddress}.\n     */\n    function getValidatorsByAddress(address ownerAddress) external view override returns (bytes[] memory) {\n        return _owners[ownerAddress].validators;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-getValidatorOwner}.\n     */\n    function getValidatorOwner(bytes calldata publicKey) external view override returns (address) {\n        return _validators[publicKey].ownerAddress;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-validatorsPerOperatorCount}.\n     */\n    function validatorsPerOperatorCount(uint32 operatorId) external view override returns (uint32) {\n        return _operators[operatorId].validatorCount;\n    }\n\n    /**\n     * @dev See {ISSVRegistry-updateOperatorFee}.\n     */\n    function _updateOperatorFeeUnsafe(uint32 operatorId, uint64 fee) private {\n        _operators[operatorId].fee = fee;\n    }\n\n    /**\n     * @dev Validates the paramss for a validator.\n     * @param publicKey Validator public key.\n     * @param operatorIds Operator operatorIds.\n     * @param sharesPublicKeys Shares public keys.\n     * @param encryptedKeys Encrypted private keys.\n     */\n    function _validateValidatorParams(\n        bytes calldata publicKey,\n        uint32[] calldata operatorIds,\n        bytes[] calldata sharesPublicKeys,\n        bytes[] calldata encryptedKeys\n    ) private pure {\n        if (publicKey.length != 48) {\n            revert InvalidPublicKeyLength();\n        }\n        if (\n            operatorIds.length != sharesPublicKeys.length ||\n            operatorIds.length != encryptedKeys.length ||\n            operatorIds.length < 4 || operatorIds.length % 3 != 1\n        ) {\n            revert OessDataStructureInvalid();\n        }\n    }\n\n    function version() external pure override returns (uint32) {\n        return 1;\n    }\n\n    uint256[50] ______gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/mocks/SSVTokenMock.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.13;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title SSV Token\n */\ncontract SSVTokenMock is Ownable, ERC20 {\n    constructor() ERC20(\"SSV Token\", \"SSV\") {\n        _mint(msg.sender, 1000000000000000000000);\n    }\n\n    /**\n     * @dev Mint tokens\n     * @param to The target address\n     * @param amount The amount of token to mint\n     */\n    function mint(address to, uint256 amount) external onlyOwner {\n        _mint(to, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}