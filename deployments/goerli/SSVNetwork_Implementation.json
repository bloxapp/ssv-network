{
  "address": "0x4723EB7a492156FfD95Ce558f0409a3aA3eBc9d7",
  "abi": [
    {
      "inputs": [],
      "name": "AccountAlreadyEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalNotWithinTimeframe",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BelowMinimumBlockPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnRatePositive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotOperatorOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotValidatorOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedManagingOperatorsPerAccountLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeExceedsIncreaseLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NegativeBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoPendingFeeChangeRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperatorWithPublicKeyNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValidatorWithPublicKeyNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "AccountEnable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "AccountLiquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "DeclareOperatorFeePeriodUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        }
      ],
      "name": "DeclaredOperatorFeeCancelation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ExecuteOperatorFeePeriodUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "senderAddress",
          "type": "address"
        }
      ],
      "name": "FundsDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "FundsWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LiquidationThresholdPeriodUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "MinimumBlocksBeforeLiquidationUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "NetworkFeeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "NetworkFeesWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "OperatorFeeDeclaration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "OperatorFeeExecution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "OperatorFeeIncreaseLimitUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "OperatorMaxFeeIncreaseUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "OperatorRegistration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "OperatorRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "OperatorScoreUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RegisteredOperatorsPerAccountLimitUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint32[]",
          "name": "operatorIds",
          "type": "uint32[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "sharesPublicKeys",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "encryptedKeys",
          "type": "bytes[]"
        }
      ],
      "name": "ValidatorRegistration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "ValidatorRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ValidatorsPerOperatorLimitUpdate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "addressNetworkFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        }
      ],
      "name": "cancelDeclaredOperatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "operatorFee",
          "type": "uint256"
        }
      ],
      "name": "declareOperatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        }
      ],
      "name": "executeOperatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getAddressBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getAddressBurnRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeclaredOperatorFeePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExecuteOperatorFeePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidationThresholdPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNetworkEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNetworkFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        }
      ],
      "name": "getOperatorById",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        }
      ],
      "name": "getOperatorDeclaredFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        }
      ],
      "name": "getOperatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorFeeIncreaseLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "getOperatorsByValidator",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getValidatorsByOwnerAddress",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISSVRegistry",
          "name": "registryAddress_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "minimumBlocksBeforeLiquidation_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "operatorMaxFeeIncrease_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "declareOperatorFeePeriod_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "executeOperatorFeePeriod_",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "isLiquidated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "ownerAddresses",
          "type": "address[]"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "reactivateAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "registerOperator",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint32[]",
          "name": "operatorIds",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "sharesPublicKeys",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "sharesEncrypted",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "registerValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "removeValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newDeclareOperatorFeePeriod",
          "type": "uint64"
        }
      ],
      "name": "updateDeclareOperatorFeePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newExecuteOperatorFeePeriod",
          "type": "uint64"
        }
      ],
      "name": "updateExecuteOperatorFeePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "blocks",
          "type": "uint64"
        }
      ],
      "name": "updateLiquidationThresholdPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateNetworkFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newOperatorMaxFeeIncrease",
          "type": "uint64"
        }
      ],
      "name": "updateOperatorFeeIncreaseLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "score",
          "type": "uint32"
        }
      ],
      "name": "updateOperatorScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint32[]",
          "name": "operatorIds",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "sharesPublicKeys",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "sharesEncrypted",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "operatorId",
          "type": "uint32"
        }
      ],
      "name": "validatorsPerOperatorCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNetworkEarnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3221cd26bf3b326a7f4fba2e6128cd85ce80585d1afc9d5d89411b77217fe901",
  "receipt": {
    "to": null,
    "from": "0xa7a7720499b7eB1F1408A8A319284bFD2Db4a427",
    "contractAddress": "0x4723EB7a492156FfD95Ce558f0409a3aA3eBc9d7",
    "transactionIndex": 0,
    "gasUsed": "4838633",
    "logsBloom": "0x
    "blockHash": "0x9d2298ae56fd38287d2663113cb0cc0675fc70b3b1ba60ba0c7b8aafafdf3854",
    "transactionHash": "0x3221cd26bf3b326a7f4fba2e6128cd85ce80585d1afc9d5d89411b77217fe901",
    "logs": [],
    "blockNumber": 7333317,
    "cumulativeGasUsed": "4838633",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "87be9d64af7a996bb66fee687b7de6b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalNotWithinTimeframe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BelowMinimumBlockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnRatePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOperatorOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotValidatorOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedManagingOperatorsPerAccountLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedsIncreaseLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NegativeBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPendingFeeChangeRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorWithPublicKeyNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValidatorWithPublicKeyNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"AccountEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"AccountLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DeclareOperatorFeePeriodUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"DeclaredOperatorFeeCancelation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ExecuteOperatorFeePeriodUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"}],\"name\":\"FundsDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"FundsWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LiquidationThresholdPeriodUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MinimumBlocksBeforeLiquidationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"NetworkFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"NetworkFeesWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OperatorFeeDeclaration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OperatorFeeExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OperatorFeeIncreaseLimitUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OperatorMaxFeeIncreaseUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OperatorRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"OperatorRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"OperatorScoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RegisteredOperatorsPerAccountLimitUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"operatorIds\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"sharesPublicKeys\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"encryptedKeys\",\"type\":\"bytes[]\"}],\"name\":\"ValidatorRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ValidatorsPerOperatorLimitUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"addressNetworkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"cancelDeclaredOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"operatorFee\",\"type\":\"uint256\"}],\"name\":\"declareOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"executeOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getAddressBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getAddressBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeclaredOperatorFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecuteOperatorFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationThresholdPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetworkEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetworkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"getOperatorById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"getOperatorDeclaredFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"getOperatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorFeeIncreaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"getOperatorsByValidator\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getValidatorsByOwnerAddress\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISSVRegistry\",\"name\":\"registryAddress_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"minimumBlocksBeforeLiquidation_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"operatorMaxFeeIncrease_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"declareOperatorFeePeriod_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"executeOperatorFeePeriod_\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"isLiquidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ownerAddresses\",\"type\":\"address[]\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reactivateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"registerOperator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32[]\",\"name\":\"operatorIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sharesPublicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sharesEncrypted\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newDeclareOperatorFeePeriod\",\"type\":\"uint64\"}],\"name\":\"updateDeclareOperatorFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newExecuteOperatorFeePeriod\",\"type\":\"uint64\"}],\"name\":\"updateExecuteOperatorFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blocks\",\"type\":\"uint64\"}],\"name\":\"updateLiquidationThresholdPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateNetworkFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newOperatorMaxFeeIncrease\",\"type\":\"uint64\"}],\"name\":\"updateOperatorFeeIncreaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"score\",\"type\":\"uint32\"}],\"name\":\"updateOperatorScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32[]\",\"name\":\"operatorIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sharesPublicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sharesEncrypted\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"validatorsPerOperatorCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNetworkEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addressNetworkFee(address)\":{\"details\":\"See {ISSVNetwork-addressNetworkFee}.\"},\"declareOperatorFee(uint32,uint256)\":{\"details\":\"Set operator's fee change request by public key.\",\"params\":{\"operatorFee\":\"The operator's updated fee.\",\"operatorId\":\"Operator's id.\"}},\"getAddressBalance(address)\":{\"details\":\"Gets total balance for an owner.\",\"params\":{\"ownerAddress\":\"Owner's address.\"}},\"getAddressBurnRate(address)\":{\"details\":\"Returns the burn rate of an owner, returns 0 if negative.\",\"params\":{\"ownerAddress\":\"Owner's address.\"}},\"getLiquidationThresholdPeriod()\":{\"details\":\"Returns the number of blocks left for an owner before they can be liquidated.\"},\"getNetworkEarnings()\":{\"details\":\"Gets the available network earnings\"},\"getNetworkFee()\":{\"details\":\"Returns the network fee.\"},\"getOperatorById(uint32)\":{\"details\":\"See {ISSVNetwork-getOperatorById}.\"},\"getOperatorFee(uint32)\":{\"details\":\"See {ISSVNetwork-getOperatorFee}.\"},\"getOperatorFeeIncreaseLimit()\":{\"details\":\"Returns the maximum fee increase in pecentage\"},\"getOperatorsByValidator(bytes)\":{\"details\":\"See {ISSVNetwork-getOperatorsByValidator}.\"},\"getValidatorsByOwnerAddress(address)\":{\"details\":\"See {ISSVNetwork-getValidatorsByAddress}.\"},\"initialize(address,address,uint64,uint64,uint64,uint64)\":{\"details\":\"Initializes the contract.\",\"params\":{\"declareOperatorFeePeriod_\":\"The period an operator needs to wait before they can approve their fee.\",\"executeOperatorFeePeriod_\":\"The length of the period in which an operator can approve their fee.\",\"minimumBlocksBeforeLiquidation_\":\"The minimum blocks before liquidation.\",\"registryAddress_\":\"The registry address.\",\"token_\":\"The network token.\"}},\"isLiquidatable(address)\":{\"details\":\"Check if an owner is liquidatable.\",\"params\":{\"ownerAddress\":\"Owner's address.\"}},\"liquidate(address[])\":{\"details\":\"Liquidates multiple owners.\",\"params\":{\"ownerAddresses\":\"Owners' addresses.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reactivateAccount(uint256)\":{\"details\":\"Enables msg.sender account.\",\"params\":{\"amount\":\"Tokens amount.\"}},\"registerOperator(string,bytes,uint256)\":{\"details\":\"See {ISSVNetwork-registerOperator}.\"},\"registerValidator(bytes,uint32[],bytes[],bytes[],uint256)\":{\"details\":\"See {ISSVNetwork-registerValidator}.\"},\"removeOperator(uint32)\":{\"details\":\"See {ISSVNetwork-removeOperator}.\"},\"removeValidator(bytes)\":{\"details\":\"See {ISSVNetwork-removeValidator}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateLiquidationThresholdPeriod(uint64)\":{\"details\":\"Updates the number of blocks left for an owner before they can be liquidated.\",\"params\":{\"blocks\":\"The new value.\"}},\"updateNetworkFee(uint256)\":{\"details\":\"See {ISSVNetwork-updateNetworkFee}.\"},\"updateOperatorFeeIncreaseLimit(uint64)\":{\"details\":\"Updates the maximum fee increase in pecentage.\",\"params\":{\"newOperatorMaxFeeIncrease\":\"The new value.\"}},\"updateOperatorScore(uint32,uint32)\":{\"details\":\"Updates operator's score by public key.\",\"params\":{\"operatorId\":\"Operator's id.\",\"score\":\"The operators's updated score.\"}},\"updateValidator(bytes,uint32[],bytes[],bytes[],uint256)\":{\"details\":\"See {ISSVNetwork-updateValidator}.\"},\"withdrawAll()\":{\"details\":\"Withdraw total balance to the sender, deactivating their validators if necessary.\"},\"withdrawNetworkEarnings(uint256)\":{\"details\":\"Withdraws network fees.\",\"params\":{\"amount\":\"Amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ValidatorWithPublicKeyNotExist()\":[{\"notice\":\"errors \"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SSVNetwork.sol\":\"SSVNetwork\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/ISSVNetwork.sol\":{\"content\":\"// File: contracts/ISSVNetwork.sol\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ISSVRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISSVNetwork {\\n    /**\\n     * @dev Emitted when the account has been enabled.\\n     * @param ownerAddress Operator's owner.\\n     */\\n    event AccountEnable(address indexed ownerAddress);\\n\\n    /**\\n     * @dev Emitted when the account has been liquidated.\\n     * @param ownerAddress Operator's owner.\\n     */\\n    event AccountLiquidation(address indexed ownerAddress);\\n\\n    /**\\n     * @dev Emitted when the operator has been added.\\n     * @param id operator's ID.\\n     * @param name Operator's display name.\\n     * @param ownerAddress Operator's ethereum address that can collect fees.\\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\\n     * @param fee Operator's initial fee.\\n     */\\n    event OperatorRegistration(\\n        uint32 indexed id,\\n        string name,\\n        address indexed ownerAddress,\\n        bytes publicKey,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted when the operator has been removed.\\n     * @param operatorId operator's ID.\\n     * @param ownerAddress Operator's owner.\\n     */\\n    event OperatorRemoval(uint32 operatorId, address indexed ownerAddress);\\n\\n    event OperatorFeeDeclaration(\\n        address indexed ownerAddress,\\n        uint32 operatorId,\\n        uint256 blockNumber,\\n        uint256 fee\\n    );\\n\\n    event DeclaredOperatorFeeCancelation(address indexed ownerAddress, uint32 operatorId);\\n\\n    /**\\n     * @dev Emitted when an operator's fee is updated.\\n     * @param ownerAddress Operator's owner.\\n     * @param blockNumber from which block number.\\n     * @param fee updated fee value.\\n     */\\n    event OperatorFeeExecution(\\n        address indexed ownerAddress,\\n        uint32 operatorId,\\n        uint256 blockNumber,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted when an operator's score is updated.\\n     * @param operatorId operator's ID.\\n     * @param ownerAddress Operator's owner.\\n     * @param blockNumber from which block number.\\n     * @param score updated score value.\\n     */\\n    event OperatorScoreUpdate(\\n        uint32 operatorId,\\n        address indexed ownerAddress,\\n        uint256 blockNumber,\\n        uint256 score\\n    );\\n\\n    /**\\n     * @dev Emitted when the validator has been added.\\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\\n     * @param publicKey The public key of a validator.\\n     * @param operatorIds The operators public keys list for this validator.\\n     * @param sharesPublicKeys The shared publick keys list for this validator.\\n     * @param encryptedKeys The encrypted keys list for this validator.\\n     */\\n    event ValidatorRegistration(\\n        address indexed ownerAddress,\\n        bytes publicKey,\\n        uint32[] operatorIds,\\n        bytes[] sharesPublicKeys,\\n        bytes[] encryptedKeys\\n    );\\n\\n    /**\\n     * @dev Emitted when the validator is removed.\\n     * @param ownerAddress Validator's owner.\\n     * @param publicKey The public key of a validator.\\n     */\\n    event ValidatorRemoval(address indexed ownerAddress, bytes publicKey);\\n\\n    /**\\n     * @dev Emitted when an owner deposits funds.\\n     * @param value Amount of tokens.\\n     * @param ownerAddress Owner's address.\\n     * @param senderAddress Sender's address.\\n     */\\n    event FundsDeposit(uint256 value, address indexed ownerAddress, address indexed senderAddress);\\n\\n    /**\\n     * @dev Emitted when an owner withdraws funds.\\n     * @param value Amount of tokens.\\n     * @param ownerAddress Owner's address.\\n     */\\n    event FundsWithdrawal(uint256 value, address indexed ownerAddress);\\n\\n    /**\\n     * @dev Emitted when the network fee is updated.\\n     * @param oldFee The old fee\\n     * @param newFee The new fee\\n     */\\n    event NetworkFeeUpdate(uint256 oldFee, uint256 newFee);\\n\\n    /**\\n     * @dev Emitted when transfer fees are withdrawn.\\n     * @param value The amount of tokens withdrawn.\\n     * @param recipient The recipient address.\\n     */\\n    event NetworkFeesWithdrawal(uint256 value, address recipient);\\n\\n    event DeclareOperatorFeePeriodUpdate(uint256 value);\\n\\n    event ExecuteOperatorFeePeriodUpdate(uint256 value);\\n\\n    event LiquidationThresholdPeriodUpdate(uint256 value);\\n\\n    event OperatorFeeIncreaseLimitUpdate(uint256 value);\\n\\n    event ValidatorsPerOperatorLimitUpdate(uint256 value);\\n\\n    event RegisteredOperatorsPerAccountLimitUpdate(uint256 value);\\n\\n    event MinimumBlocksBeforeLiquidationUpdate(uint256 value);\\n\\n    event OperatorMaxFeeIncreaseUpdate(uint256 value);\\n\\n    /** errors */\\n    error ValidatorWithPublicKeyNotExist();\\n    error CallerNotValidatorOwner();\\n    error OperatorWithPublicKeyNotExist();\\n    error CallerNotOperatorOwner();\\n    error FeeTooLow();\\n    error FeeExceedsIncreaseLimit();\\n    error NoPendingFeeChangeRequest();\\n    error ApprovalNotWithinTimeframe();\\n    error NotEnoughBalance();\\n    error BurnRatePositive();\\n    error AccountAlreadyEnabled();\\n    error NegativeBalance();\\n    error BelowMinimumBlockPeriod();\\n    error ExceedManagingOperatorsPerAccountLimit();\\n\\n    /**\\n     * @dev Initializes the contract.\\n     * @param registryAddress_ The registry address.\\n     * @param token_ The network token.\\n     * @param minimumBlocksBeforeLiquidation_ The minimum blocks before liquidation.\\n     * @param declareOperatorFeePeriod_ The period an operator needs to wait before they can approve their fee.\\n     * @param executeOperatorFeePeriod_ The length of the period in which an operator can approve their fee.\\n     */\\n    function initialize(\\n        ISSVRegistry registryAddress_,\\n        IERC20 token_,\\n        uint64 minimumBlocksBeforeLiquidation_,\\n        uint64 operatorMaxFeeIncrease_,\\n        uint64 declareOperatorFeePeriod_,\\n        uint64 executeOperatorFeePeriod_\\n    ) external;\\n\\n    /**\\n     * @dev Registers a new operator.\\n     * @param name Operator's display name.\\n     * @param publicKey Operator's public key. Used to encrypt secret shares of validators keys.\\n     */\\n    function registerOperator(\\n        string calldata name,\\n        bytes calldata publicKey,\\n        uint256 fee\\n    ) external returns (uint32);\\n\\n    /**\\n     * @dev Removes an operator.\\n     * @param operatorId Operator's id.\\n     */\\n    function removeOperator(uint32 operatorId) external;\\n\\n    /**\\n     * @dev Set operator's fee change request by public key.\\n     * @param operatorId Operator's id.\\n     * @param operatorFee The operator's updated fee.\\n     */\\n    function declareOperatorFee(uint32 operatorId, uint256 operatorFee) external;\\n\\n    function cancelDeclaredOperatorFee(uint32 operatorId) external;\\n\\n    function executeOperatorFee(uint32 operatorId) external;\\n\\n    /**\\n     * @dev Updates operator's score by public key.\\n     * @param operatorId Operator's id.\\n     * @param score The operators's updated score.\\n     */\\n    function updateOperatorScore(uint32 operatorId, uint32 score) external;\\n\\n    /**\\n     * @dev Registers a new validator.\\n     * @param publicKey Validator public key.\\n     * @param operatorIds Operator public keys.\\n     * @param sharesPublicKeys Shares public keys.\\n     * @param sharesEncrypted Encrypted private keys.\\n     * @param amount Amount of tokens to deposit.\\n     */\\n    function registerValidator(\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Updates a validator.\\n     * @param publicKey Validator public key.\\n     * @param operatorIds Operator public keys.\\n     * @param sharesPublicKeys Shares public keys.\\n     * @param sharesEncrypted Encrypted private keys.\\n     * @param amount Amount of tokens to deposit.\\n     */\\n    function updateValidator(\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Removes a validator.\\n     * @param publicKey Validator's public key.\\n     */\\n    function removeValidator(bytes calldata publicKey) external;\\n\\n    /**\\n     * @dev Deposits tokens for the sender.\\n     * @param ownerAddress Owners' addresses.\\n     * @param tokenAmount Tokens amount.\\n     */\\n    function deposit(address ownerAddress, uint256 tokenAmount) external;\\n\\n    /**\\n     * @dev Withdraw tokens for the sender.\\n     * @param tokenAmount Tokens amount.\\n     */\\n    function withdraw(uint256 tokenAmount) external;\\n\\n    /**\\n     * @dev Withdraw total balance to the sender, deactivating their validators if necessary.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Liquidates multiple owners.\\n     * @param ownerAddresses Owners' addresses.\\n     */\\n    function liquidate(address[] calldata ownerAddresses) external;\\n\\n    /**\\n     * @dev Enables msg.sender account.\\n     * @param amount Tokens amount.\\n     */\\n    function reactivateAccount(uint256 amount) external;\\n\\n    /**\\n     * @dev Updates the number of blocks left for an owner before they can be liquidated.\\n     * @param blocks The new value.\\n     */\\n    function updateLiquidationThresholdPeriod(uint64 blocks) external;\\n\\n    /**\\n     * @dev Updates the maximum fee increase in pecentage.\\n     * @param newOperatorMaxFeeIncrease The new value.\\n     */\\n    function updateOperatorFeeIncreaseLimit(uint64 newOperatorMaxFeeIncrease) external;\\n\\n    function updateDeclareOperatorFeePeriod(uint64 newDeclareOperatorFeePeriod) external;\\n\\n    function updateExecuteOperatorFeePeriod(uint64 newExecuteOperatorFeePeriod) external;\\n\\n    /**\\n     * @dev Updates the network fee.\\n     * @param fee the new fee\\n     */\\n    function updateNetworkFee(uint256 fee) external;\\n\\n    /**\\n     * @dev Withdraws network fees.\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawNetworkEarnings(uint256 amount) external;\\n\\n    /**\\n     * @dev Gets total balance for an owner.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function getAddressBalance(address ownerAddress) external view returns (uint256);\\n\\n    function isLiquidated(address ownerAddress) external view returns (bool);\\n\\n    /**\\n     * @dev Gets an operator by operator id.\\n     * @param operatorId Operator's id.\\n     */\\n    function getOperatorById(uint32 operatorId)\\n        external view\\n        returns (\\n            string memory,\\n            address,\\n            bytes memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Gets a validator public keys by owner's address.\\n     * @param ownerAddress Owner's Address.\\n     */\\n    function getValidatorsByOwnerAddress(address ownerAddress)\\n        external view\\n        returns (bytes[] memory);\\n\\n    /**\\n     * @dev Gets operators list which are in use by validator.\\n     * @param validatorPublicKey Validator's public key.\\n     */\\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\\n        external view\\n        returns (uint32[] memory);\\n\\n    function getOperatorDeclaredFee(uint32 operatorId) external view returns (uint256, uint256, uint256);\\n\\n    /**\\n     * @dev Gets operator current fee.\\n     * @param operatorId Operator's id.\\n     */\\n    function getOperatorFee(uint32 operatorId) external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the network fee for an address.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function addressNetworkFee(address ownerAddress) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the burn rate of an owner, returns 0 if negative.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function getAddressBurnRate(address ownerAddress) external view returns (uint256);\\n\\n    /**\\n     * @dev Check if an owner is liquidatable.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function isLiquidatable(address ownerAddress) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the network fee.\\n     */\\n    function getNetworkFee() external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the available network earnings\\n     */\\n    function getNetworkEarnings() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of blocks left for an owner before they can be liquidated.\\n     */\\n    function getLiquidationThresholdPeriod() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the maximum fee increase in pecentage\\n     */\\n     function getOperatorFeeIncreaseLimit() external view returns (uint256);\\n\\n     function getExecuteOperatorFeePeriod() external view returns (uint256);\\n\\n     function getDeclaredOperatorFeePeriod() external view returns (uint256);\\n\\n     function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x3d2ff5c2f5d8c94eb6da63a564cb50cecb4a53c373371b0012f1c48e751e38c7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/ISSVRegistry.sol\":{\"content\":\"// File: contracts/ISSVRegistry.sol\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.2;\\n\\ninterface ISSVRegistry {\\n    struct Oess {\\n        uint32 operatorId;\\n        bytes sharedPublicKey;\\n        bytes encryptedKey;\\n    }\\n\\n    /** errors */\\n    error ExceedRegisteredOperatorsByAccountLimit();\\n    error OperatorDeleted();\\n    error ValidatorAlreadyExists();\\n    error ExceedValidatorLimit();\\n    error OperatorNotFound();\\n    error InvalidPublicKeyLength();\\n    error OessDataStructureInvalid();\\n\\n    /**\\n     * @dev Initializes the contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Registers a new operator.\\n     * @param name Operator's display name.\\n     * @param ownerAddress Operator's ethereum address that can collect fees.\\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\\n     * @param fee The fee which the operator charges for each block.\\n     */\\n    function registerOperator(string calldata name, address ownerAddress, bytes calldata publicKey, uint64 fee) external returns (uint32);\\n\\n    /**\\n     * @dev removes an operator.\\n     * @param operatorId Operator id.\\n     */\\n    function removeOperator(uint32 operatorId) external;\\n\\n    /**\\n     * @dev Updates an operator fee.\\n     * @param operatorId Operator id.\\n     * @param fee New operator fee.\\n     */\\n    function updateOperatorFee(\\n        uint32 operatorId,\\n        uint64 fee\\n    ) external;\\n\\n    /**\\n     * @dev Updates an operator fee.\\n     * @param operatorId Operator id.\\n     * @param score New score.\\n     */\\n    function updateOperatorScore(\\n        uint32 operatorId,\\n        uint32 score\\n    ) external;\\n\\n    /**\\n     * @dev Registers a new validator.\\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\\n     * @param publicKey Validator public key.\\n     * @param operatorIds Operator ids.\\n     * @param sharesPublicKeys Shares public keys.\\n     * @param sharesEncrypted Encrypted private keys.\\n     */\\n    function registerValidator(\\n        address ownerAddress,\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted\\n    ) external;\\n\\n    /**\\n     * @dev removes a validator.\\n     * @param publicKey Validator's public key.\\n     */\\n    function removeValidator(bytes calldata publicKey) external;\\n\\n    function enableOwnerValidators(address ownerAddress) external;\\n\\n    function disableOwnerValidators(address ownerAddress) external;\\n\\n    function isLiquidated(address ownerAddress) external view returns (bool);\\n\\n    /**\\n     * @dev Gets an operator by operator id.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorById(uint32 operatorId)\\n        external view\\n        returns (\\n            string memory,\\n            address,\\n            bytes memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Returns operators for owner.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function getOperatorsByOwnerAddress(address ownerAddress)\\n        external view\\n        returns (uint32[] memory);\\n\\n    /**\\n     * @dev Gets operators list which are in use by validator.\\n     * @param validatorPublicKey Validator's public key.\\n     */\\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\\n        external view\\n        returns (uint32[] memory);\\n\\n    /**\\n     * @dev Gets operator's owner.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorOwner(uint32 operatorId) external view returns (address);\\n\\n    /**\\n     * @dev Gets operator current fee.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorFee(uint32 operatorId)\\n        external view\\n        returns (uint64);\\n\\n    /**\\n     * @dev Gets active validator count.\\n     */\\n    function activeValidatorCount() external view returns (uint32);\\n\\n    /**\\n     * @dev Gets an validator by public key.\\n     * @param publicKey Validator's public key.\\n     */\\n    function validators(bytes calldata publicKey)\\n        external view\\n        returns (\\n            address,\\n            bytes memory,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Gets a validator public keys by owner's address.\\n     * @param ownerAddress Owner's Address.\\n     */\\n    function getValidatorsByAddress(address ownerAddress)\\n        external view\\n        returns (bytes[] memory);\\n\\n    /**\\n     * @dev Get validator's owner.\\n     * @param publicKey Validator's public key.\\n     */\\n    function getValidatorOwner(bytes calldata publicKey) external view returns (address);\\n\\n    /**\\n     * @dev Get validators amount per operator.\\n     * @param operatorId Operator public key\\n     */\\n    function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\\n}\",\"keccak256\":\"0xc43589f0f38f8dcd2b808071bc46162081b6198be4baee9f44d5ff1556ffb10f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/SSVNetwork.sol\":{\"content\":\"// File: contracts/SSVNetwork.sol\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./utils/VersionedContract.sol\\\";\\nimport \\\"./utils/Types.sol\\\";\\nimport \\\"./ISSVNetwork.sol\\\";\\n\\ncontract SSVNetwork is OwnableUpgradeable, ISSVNetwork, VersionedContract {\\n    using Types256 for uint256;\\n    using Types64 for uint64;\\n\\n    struct OperatorData {\\n        uint256 blockNumber;\\n        uint64 earnings;\\n        uint64 index;\\n        uint256 indexBlockNumber;\\n        uint32 activeValidatorCount;\\n    }\\n\\n    struct OwnerData {\\n        uint64 deposited;\\n        uint64 withdrawn;\\n        uint64 used;\\n        uint64 networkFee;\\n        uint64 networkFeeIndex;\\n        uint32 activeValidatorCount;\\n        bool validatorsDisabled;\\n    }\\n\\n    struct OperatorInUse {\\n        uint64 index;\\n        uint64 used;\\n        uint32 validatorCount;\\n        uint32 indexInArray;\\n        bool exists;\\n    }\\n\\n    struct FeeChangeRequest {\\n        uint64 fee;\\n        uint256 approvalBeginTime;\\n        uint256 approvalEndTime;\\n    }\\n\\n    ISSVRegistry private _ssvRegistryContract;\\n    IERC20 private _token;\\n    uint64 private _minimumBlocksBeforeLiquidation;\\n    uint64 private _operatorMaxFeeIncrease;\\n\\n    uint64 private _networkFee;\\n    uint64 private _networkFeeIndex;\\n    uint256 private _networkFeeIndexBlockNumber;\\n    uint64 private _networkEarnings;\\n    uint256 private _networkEarningsBlockNumber;\\n    uint64 private _withdrawnFromTreasury;\\n\\n    mapping(uint32 => OperatorData) private _operatorDatas;\\n    mapping(address => OwnerData) private _owners;\\n    mapping(address => mapping(uint32 => OperatorInUse)) private _operatorsInUseByAddress;\\n    mapping(address => uint32[]) private _operatorsInUseList;\\n\\n    uint64 private _declareOperatorFeePeriod;\\n    uint64 private _executeOperatorFeePeriod;\\n    mapping(uint32 => FeeChangeRequest) private _feeChangeRequests;\\n\\n    uint16 constant private MINIMAL_OPERATOR_FEE = 1000;\\n    uint16 constant private MANAGING_OPERATORS_PER_ACCOUNT_LIMIT = 50;\\n    uint16 constant private MINIMAL_LIQUIDATION_THRESHOLD = 6570;\\n\\n    function initialize(\\n        ISSVRegistry registryAddress_,\\n        IERC20 token_,\\n        uint64 minimumBlocksBeforeLiquidation_,\\n        uint64 operatorMaxFeeIncrease_,\\n        uint64 declareOperatorFeePeriod_,\\n        uint64 executeOperatorFeePeriod_\\n    ) external initializer override {\\n        __SSVNetwork_init(registryAddress_, token_, minimumBlocksBeforeLiquidation_, operatorMaxFeeIncrease_, declareOperatorFeePeriod_, executeOperatorFeePeriod_);\\n    }\\n\\n    function __SSVNetwork_init(\\n        ISSVRegistry registryAddress_,\\n        IERC20 token_,\\n        uint64 minimumBlocksBeforeLiquidation_,\\n        uint64 operatorMaxFeeIncrease_,\\n        uint64 declareOperatorFeePeriod_,\\n        uint64 executeOperatorFeePeriod_\\n    ) internal initializer {\\n        __Ownable_init_unchained();\\n        __SSVNetwork_init_unchained(registryAddress_, token_, minimumBlocksBeforeLiquidation_, operatorMaxFeeIncrease_, declareOperatorFeePeriod_, executeOperatorFeePeriod_);\\n    }\\n\\n    function __SSVNetwork_init_unchained(\\n        ISSVRegistry registryAddress_,\\n        IERC20 token_,\\n        uint64 minimumBlocksBeforeLiquidation_,\\n        uint64 operatorMaxFeeIncrease_,\\n        uint64 declareOperatorFeePeriod_,\\n        uint64 executeOperatorFeePeriod_\\n    ) internal onlyInitializing {\\n        _ssvRegistryContract = registryAddress_;\\n        _token = token_;\\n        _updateLiquidationThresholdPeriod(minimumBlocksBeforeLiquidation_);\\n        _updateOperatorFeeIncreaseLimit(operatorMaxFeeIncrease_);\\n        _updateDeclareOperatorFeePeriod(declareOperatorFeePeriod_);\\n        _updateExecuteOperatorFeePeriod(executeOperatorFeePeriod_);\\n    }\\n\\n    modifier onlyValidatorOwnerOrContractOwner(bytes calldata publicKey) {\\n        _onlyValidatorOwnerOrContractOwner(publicKey);\\n        _;\\n    }\\n\\n    modifier onlyOperatorOwnerOrContractOwner(uint32 operatorId) {\\n        _onlyOperatorOwnerOrContractOwner(operatorId);\\n        _;\\n    }\\n\\n    modifier ensureMinimalOperatorFee(uint256 fee) {\\n        _ensureMinimalOperatorFee(fee.shrink());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-registerOperator}.\\n     */\\n    function registerOperator(\\n        string calldata name,\\n        bytes calldata publicKey,\\n        uint256 fee\\n    ) ensureMinimalOperatorFee(fee) external override returns (uint32 operatorId) {\\n        operatorId = _ssvRegistryContract.registerOperator(\\n            name,\\n            msg.sender,\\n            publicKey,\\n            fee.shrink()\\n        );\\n\\n        _operatorDatas[operatorId] = OperatorData({ blockNumber: block.number, earnings: 0, index: 0, indexBlockNumber: block.number, activeValidatorCount: 0 });\\n        emit OperatorRegistration(operatorId, name, msg.sender, publicKey, fee.shrink().expand());\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-removeOperator}.\\n     */\\n    function removeOperator(uint32 operatorId) onlyOperatorOwnerOrContractOwner(operatorId) external override {\\n        address owner = _ssvRegistryContract.getOperatorOwner(operatorId);\\n\\n        _updateOperatorFeeUnsafe(operatorId, 0);\\n        _ssvRegistryContract.removeOperator(operatorId);\\n\\n        emit OperatorRemoval(operatorId, owner);\\n    }\\n\\n    function declareOperatorFee(uint32 operatorId, uint256 operatorFee) onlyOperatorOwnerOrContractOwner(operatorId) ensureMinimalOperatorFee(operatorFee) external override {\\n        if (operatorFee.shrink() > _ssvRegistryContract.getOperatorFee(operatorId) * (10000 + _operatorMaxFeeIncrease) / 10000) {\\n            revert FeeExceedsIncreaseLimit();\\n        }\\n        _feeChangeRequests[operatorId] = FeeChangeRequest(operatorFee.shrink(), block.timestamp + _declareOperatorFeePeriod, block.timestamp + _declareOperatorFeePeriod + _executeOperatorFeePeriod);\\n\\n        emit OperatorFeeDeclaration(msg.sender, operatorId, block.number, operatorFee);\\n    }\\n\\n    function cancelDeclaredOperatorFee(uint32 operatorId) onlyOperatorOwnerOrContractOwner(operatorId) external override {\\n        delete _feeChangeRequests[operatorId];\\n\\n        emit DeclaredOperatorFeeCancelation(msg.sender, operatorId);\\n    }\\n\\n    function executeOperatorFee(uint32 operatorId) onlyOperatorOwnerOrContractOwner(operatorId) external override {\\n        FeeChangeRequest storage feeChangeRequest = _feeChangeRequests[operatorId];\\n\\n        if(feeChangeRequest.fee == 0) {\\n            revert NoPendingFeeChangeRequest();\\n        }\\n        if(block.timestamp < feeChangeRequest.approvalBeginTime || block.timestamp > feeChangeRequest.approvalEndTime) {\\n            revert ApprovalNotWithinTimeframe();\\n        }\\n\\n        _updateOperatorFeeUnsafe(operatorId, feeChangeRequest.fee);\\n\\n        emit OperatorFeeExecution(msg.sender, operatorId, block.number, feeChangeRequest.fee.expand());\\n\\n        delete _feeChangeRequests[operatorId];\\n    }\\n\\n    function updateOperatorScore(uint32 operatorId, uint32 score) onlyOwner external override {\\n        _ssvRegistryContract.updateOperatorScore(operatorId, score);\\n\\n        emit OperatorScoreUpdate(operatorId, msg.sender, block.number, score);\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-registerValidator}.\\n     */\\n    function registerValidator(\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted,\\n        uint256 amount\\n    ) external override {\\n        _updateNetworkEarnings();\\n        _updateAddressNetworkFee(msg.sender);\\n        _registerValidatorUnsafe(msg.sender, publicKey, operatorIds, sharesPublicKeys, sharesEncrypted, amount);\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-updateValidator}.\\n     */\\n    function updateValidator(\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted,\\n        uint256 amount\\n    ) onlyValidatorOwnerOrContractOwner(publicKey) external override {\\n        _removeValidatorUnsafe(msg.sender, publicKey);\\n        _registerValidatorUnsafe(msg.sender, publicKey, operatorIds, sharesPublicKeys, sharesEncrypted, amount);\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-removeValidator}.\\n     */\\n    function removeValidator(bytes calldata publicKey) onlyValidatorOwnerOrContractOwner(publicKey) external override {\\n        _updateNetworkEarnings();\\n        _updateAddressNetworkFee(msg.sender);\\n        _removeValidatorUnsafe(msg.sender, publicKey);\\n        _totalBalanceOf(msg.sender); // For assertion\\n    }\\n\\n    function deposit(address ownerAddress, uint256 amount) external override {\\n        _deposit(ownerAddress, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        if(_totalBalanceOf(msg.sender) < amount.shrink()) {\\n            revert NotEnoughBalance();\\n        }\\n\\n        _withdrawUnsafe(amount.shrink());\\n\\n        if(_liquidatable(msg.sender)) {\\n            revert NotEnoughBalance();\\n        }\\n    }\\n\\n    function withdrawAll() external override {\\n        if(_burnRate(msg.sender) > 0) {\\n            revert BurnRatePositive();\\n        }\\n\\n        _withdrawUnsafe(_totalBalanceOf(msg.sender));\\n    }\\n\\n    function liquidate(address[] calldata ownerAddresses) external override {\\n        uint64 balanceToTransfer = 0;\\n\\n        for (uint32 index = 0; index < ownerAddresses.length; ++index) {\\n            if (_canLiquidate(ownerAddresses[index])) {\\n                balanceToTransfer += _liquidateUnsafe(ownerAddresses[index]);\\n            }\\n        }\\n\\n        _token.transfer(msg.sender, balanceToTransfer.expand());\\n    }\\n\\n    function reactivateAccount(uint256 amount) external override {\\n        if (!_owners[msg.sender].validatorsDisabled) {\\n            revert AccountAlreadyEnabled();\\n        }\\n\\n        _deposit(msg.sender, amount);\\n\\n        _enableOwnerValidatorsUnsafe(msg.sender);\\n\\n        if(_liquidatable(msg.sender)) {\\n            revert NotEnoughBalance();\\n        }\\n\\n        emit AccountEnable(msg.sender);\\n    }\\n\\n    function updateLiquidationThresholdPeriod(uint64 blocks) external onlyOwner override {\\n        if(blocks < MINIMAL_LIQUIDATION_THRESHOLD) {\\n            revert BelowMinimumBlockPeriod();\\n        }\\n\\n        _updateLiquidationThresholdPeriod(blocks);\\n    }\\n\\n    function updateOperatorFeeIncreaseLimit(uint64 newOperatorMaxFeeIncrease) external onlyOwner override {\\n        _updateOperatorFeeIncreaseLimit(newOperatorMaxFeeIncrease);\\n    }\\n\\n    function updateDeclareOperatorFeePeriod(uint64 newDeclareOperatorFeePeriod) external onlyOwner override {\\n        _updateDeclareOperatorFeePeriod(newDeclareOperatorFeePeriod);\\n    }\\n\\n    function updateExecuteOperatorFeePeriod(uint64 newExecuteOperatorFeePeriod) external onlyOwner override {\\n        _updateExecuteOperatorFeePeriod(newExecuteOperatorFeePeriod);\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-updateNetworkFee}.\\n     */\\n    function updateNetworkFee(uint256 fee) external onlyOwner override {\\n        emit NetworkFeeUpdate(_networkFee.expand(), fee);\\n        _updateNetworkEarnings();\\n        _updateNetworkFeeIndex();\\n        _networkFee = fee.shrink();\\n    }\\n\\n    function withdrawNetworkEarnings(uint256 amount) external onlyOwner override {\\n        if(amount.shrink() > _getNetworkEarnings()) {\\n            revert NotEnoughBalance();\\n        }\\n\\n        _withdrawnFromTreasury += amount.shrink();\\n        _token.transfer(msg.sender, amount);\\n\\n        emit NetworkFeesWithdrawal(amount, msg.sender);\\n    }\\n\\n    function getAddressBalance(address ownerAddress) external override view returns (uint256) {\\n        return _totalBalanceOf(ownerAddress).expand();\\n    }\\n\\n    function isLiquidated(address ownerAddress) external view override returns (bool) {\\n        return _owners[ownerAddress].validatorsDisabled;\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-getOperatorById}.\\n     */\\n    function getOperatorById(uint32 operatorId) external view override returns (string memory, address, bytes memory, uint256, uint256, uint256, bool) {\\n        return _ssvRegistryContract.getOperatorById(operatorId);\\n    }\\n\\n    function getOperatorDeclaredFee(uint32 operatorId) external view override returns (uint256, uint256, uint256) {\\n        FeeChangeRequest storage feeChangeRequest = _feeChangeRequests[operatorId];\\n\\n        return (feeChangeRequest.fee.expand(), feeChangeRequest.approvalBeginTime, feeChangeRequest.approvalEndTime);\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-getOperatorFee}.\\n     */\\n    function getOperatorFee(uint32 operatorId) external view override returns (uint256) {\\n        return _ssvRegistryContract.getOperatorFee(operatorId).expand();\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-getOperatorsByValidator}.\\n     */\\n    function getOperatorsByValidator(bytes memory publicKey) external view override returns (uint32[] memory) {\\n        return _ssvRegistryContract.getOperatorsByValidator(publicKey);\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-getValidatorsByAddress}.\\n     */\\n    function getValidatorsByOwnerAddress(address ownerAddress) external view override returns (bytes[] memory) {\\n        return _ssvRegistryContract.getValidatorsByAddress(ownerAddress);\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-addressNetworkFee}.\\n     */\\n    function addressNetworkFee(address ownerAddress) external view override returns (uint256) {\\n        return _addressNetworkFee(ownerAddress);\\n    }\\n\\n    function getAddressBurnRate(address ownerAddress) external view override returns (uint256) {\\n        return _burnRate(ownerAddress).expand();\\n    }\\n\\n    function isLiquidatable(address ownerAddress) external view override returns (bool) {\\n        return _liquidatable(ownerAddress);\\n    }\\n\\n    function getNetworkFee() external view override returns (uint256) {\\n        return _networkFee.expand();\\n    }\\n\\n    function getNetworkEarnings() external view override returns (uint256) {\\n        return _getNetworkEarnings().expand();\\n    }\\n\\n    function getLiquidationThresholdPeriod() external view override returns (uint256) {\\n        return _minimumBlocksBeforeLiquidation;\\n    }\\n\\n    function getOperatorFeeIncreaseLimit() external view override returns (uint256) {\\n        return _operatorMaxFeeIncrease;\\n    }\\n\\n    function getExecuteOperatorFeePeriod() external view override returns (uint256) {\\n        return _executeOperatorFeePeriod;\\n    }\\n\\n    function getDeclaredOperatorFeePeriod() external view override returns (uint256) {\\n        return _declareOperatorFeePeriod;\\n    }\\n\\n    function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32) {\\n        return _ssvRegistryContract.validatorsPerOperatorCount(operatorId);\\n    }\\n\\n    function _deposit(address ownerAddress, uint256 amount) private {\\n        _token.transferFrom(msg.sender, address(this), amount);\\n        _owners[ownerAddress].deposited += amount.shrink();\\n\\n        emit FundsDeposit(amount, ownerAddress, msg.sender);\\n    }\\n\\n    function _withdrawUnsafe(uint64 amount) private {\\n        _owners[msg.sender].withdrawn += amount;\\n        _token.transfer(msg.sender, amount.expand());\\n\\n        emit FundsWithdrawal(amount.expand(), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Update network fee for the address.\\n     * @param ownerAddress Owner address.\\n     */\\n    function _updateAddressNetworkFee(address ownerAddress) private {\\n        _owners[ownerAddress].networkFee = _addressNetworkFee(ownerAddress);\\n        _owners[ownerAddress].networkFeeIndex = _currentNetworkFeeIndex();\\n    }\\n\\n    function _updateOperatorIndex(uint32 operatorId) private {\\n        _operatorDatas[operatorId].index = _operatorIndexOf(operatorId);\\n    }\\n\\n    /**\\n     * @dev Updates operators's balance.\\n     */\\n    function _updateOperatorBalance(uint32 operatorId) private {\\n        OperatorData storage operatorData = _operatorDatas[operatorId];\\n        operatorData.earnings = _operatorEarningsOf(operatorId);\\n        operatorData.blockNumber = block.number;\\n    }\\n\\n    function _liquidateUnsafe(address ownerAddress) private returns (uint64) {\\n        _disableOwnerValidatorsUnsafe(ownerAddress);\\n\\n        uint64 balanceToTransfer = _totalBalanceOf(ownerAddress);\\n\\n        _owners[ownerAddress].used += balanceToTransfer;\\n\\n        emit AccountLiquidation(ownerAddress);\\n\\n        return balanceToTransfer;\\n    }\\n\\n    function _updateNetworkEarnings() private {\\n        _networkEarnings = _getTotalNetworkEarnings();\\n        _networkEarningsBlockNumber = block.number;\\n    }\\n\\n    function _updateNetworkFeeIndex() private {\\n        _networkFeeIndex = _currentNetworkFeeIndex();\\n        _networkFeeIndexBlockNumber = block.number;\\n    }\\n\\n    function _registerValidatorUnsafe(\\n        address ownerAddress,\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata encryptedKeys,\\n        uint256 tokenAmount) private {\\n\\n        _ssvRegistryContract.registerValidator(\\n            ownerAddress,\\n            publicKey,\\n            operatorIds,\\n            sharesPublicKeys,\\n            encryptedKeys\\n        );\\n\\n        OwnerData storage owner = _owners[ownerAddress];\\n\\n        if (!owner.validatorsDisabled) {\\n            ++owner.activeValidatorCount;\\n        }\\n\\n        for (uint32 index = 0; index < operatorIds.length; ++index) {\\n            uint32 operatorId = operatorIds[index];\\n            _updateOperatorBalance(operatorId);\\n\\n            if (!owner.validatorsDisabled) {\\n                ++_operatorDatas[operatorId].activeValidatorCount;\\n            }\\n\\n            _useOperatorByOwner(ownerAddress, operatorId);\\n        }\\n        if (tokenAmount > 0) {\\n            _deposit(msg.sender, tokenAmount);\\n        }\\n\\n        if(_liquidatable(ownerAddress)) {\\n            revert NotEnoughBalance();\\n        }\\n\\n        emit ValidatorRegistration(ownerAddress, publicKey, operatorIds, sharesPublicKeys, encryptedKeys);\\n    }\\n\\n    function _removeValidatorUnsafe(address ownerAddress, bytes memory publicKey) private {\\n        _unregisterValidator(ownerAddress, publicKey);\\n        _ssvRegistryContract.removeValidator(publicKey);\\n\\n        if (!_owners[ownerAddress].validatorsDisabled) {\\n            --_owners[ownerAddress].activeValidatorCount;\\n        }\\n\\n        emit ValidatorRemoval(ownerAddress, publicKey);\\n    }\\n\\n    function _unregisterValidator(address ownerAddress, bytes memory publicKey) private {\\n        // calculate balances for current operators in use and update their balances\\n        uint32[] memory currentOperatorIds = _ssvRegistryContract.getOperatorsByValidator(publicKey);\\n        for (uint32 index = 0; index < currentOperatorIds.length; ++index) {\\n            uint32 operatorId = currentOperatorIds[index];\\n            _updateOperatorBalance(operatorId);\\n\\n            if (!_owners[ownerAddress].validatorsDisabled) {\\n                --_operatorDatas[operatorId].activeValidatorCount;\\n            }\\n\\n            _stopUsingOperatorByOwner(ownerAddress, operatorId);\\n        }\\n    }\\n\\n    function _useOperatorByOwner(address ownerAddress, uint32 operatorId) private {\\n        _updateUsingOperatorByOwner(ownerAddress, operatorId, true);\\n    }\\n\\n    function _stopUsingOperatorByOwner(address ownerAddress, uint32 operatorId) private {\\n        _updateUsingOperatorByOwner(ownerAddress, operatorId, false);\\n    }\\n\\n    function _updateOperatorFeeUnsafe(uint32 operatorId, uint64 fee) private {\\n        OperatorData storage operatorData = _operatorDatas[operatorId];\\n        _updateOperatorIndex(operatorId);\\n        operatorData.indexBlockNumber = block.number;\\n        _updateOperatorBalance(operatorId);\\n        _ssvRegistryContract.updateOperatorFee(operatorId, fee);\\n    }\\n\\n    /**\\n     * @dev Updates the relation between operator and owner\\n     * @param ownerAddress Owner address.\\n     * @param increase Change value for validators amount.\\n     */\\n    function _updateUsingOperatorByOwner(address ownerAddress, uint32 operatorId, bool increase) private {\\n        OperatorInUse storage operatorInUseData = _operatorsInUseByAddress[ownerAddress][operatorId];\\n\\n        if (operatorInUseData.exists) {\\n            _updateOperatorUsageByOwner(operatorInUseData, ownerAddress, operatorId);\\n\\n            if (increase) {\\n                ++operatorInUseData.validatorCount;\\n            } else {\\n                if (--operatorInUseData.validatorCount == 0) {\\n                    _owners[ownerAddress].used += operatorInUseData.used;\\n\\n                    // remove from mapping and list;\\n\\n                    _operatorsInUseList[ownerAddress][operatorInUseData.indexInArray] = _operatorsInUseList[ownerAddress][_operatorsInUseList[ownerAddress].length - 1];\\n                    _operatorsInUseByAddress[ownerAddress][_operatorsInUseList[ownerAddress][operatorInUseData.indexInArray]].indexInArray = operatorInUseData.indexInArray;\\n                    _operatorsInUseList[ownerAddress].pop();\\n\\n                    delete _operatorsInUseByAddress[ownerAddress][operatorId];\\n                }\\n            }\\n        } else {\\n            if (_operatorsInUseList[ownerAddress].length > MANAGING_OPERATORS_PER_ACCOUNT_LIMIT) {\\n                revert ExceedManagingOperatorsPerAccountLimit();\\n            }\\n\\n            _operatorsInUseByAddress[ownerAddress][operatorId] = OperatorInUse({ index: _operatorIndexOf(operatorId), validatorCount: 1, used: 0, exists: true, indexInArray: uint32(_operatorsInUseList[ownerAddress].length) });\\n            _operatorsInUseList[ownerAddress].push(operatorId);\\n        }\\n    }\\n\\n    function _disableOwnerValidatorsUnsafe(address ownerAddress) private {\\n        _updateNetworkEarnings();\\n        _updateAddressNetworkFee(ownerAddress);\\n\\n        for (uint32 index = 0; index < _operatorsInUseList[ownerAddress].length; ++index) {\\n            uint32 operatorId = _operatorsInUseList[ownerAddress][index];\\n            _updateOperatorBalance(operatorId);\\n            OperatorInUse storage operatorInUseData = _operatorsInUseByAddress[ownerAddress][operatorId];\\n            _updateOperatorUsageByOwner(operatorInUseData, ownerAddress, operatorId);\\n            _operatorDatas[operatorId].activeValidatorCount -= operatorInUseData.validatorCount;\\n        }\\n\\n        _ssvRegistryContract.disableOwnerValidators(ownerAddress);\\n\\n        _owners[ownerAddress].validatorsDisabled = true;\\n    }\\n\\n    function _enableOwnerValidatorsUnsafe(address ownerAddress) private {\\n        _updateNetworkEarnings();\\n        _updateAddressNetworkFee(ownerAddress);\\n\\n        for (uint32 index = 0; index < _operatorsInUseList[ownerAddress].length; ++index) {\\n            uint32 operatorId = _operatorsInUseList[ownerAddress][index];\\n            _updateOperatorBalance(operatorId);\\n            OperatorInUse storage operatorInUseData = _operatorsInUseByAddress[ownerAddress][operatorId];\\n            _updateOperatorUsageByOwner(operatorInUseData, ownerAddress, operatorId);\\n            _operatorDatas[operatorId].activeValidatorCount += operatorInUseData.validatorCount;\\n        }\\n\\n        _ssvRegistryContract.enableOwnerValidators(ownerAddress);\\n\\n        _owners[ownerAddress].validatorsDisabled = false;\\n    }\\n\\n    function _updateOperatorUsageByOwner(OperatorInUse storage operatorInUseData, address ownerAddress, uint32 operatorId) private {\\n        operatorInUseData.used = _operatorInUseUsageOf(operatorInUseData, ownerAddress, operatorId);\\n        operatorInUseData.index = _operatorIndexOf(operatorId);\\n    }\\n\\n    function _updateLiquidationThresholdPeriod(uint64 newMinimumBlocksBeforeLiquidation) private {\\n        _minimumBlocksBeforeLiquidation = newMinimumBlocksBeforeLiquidation;\\n\\n        emit LiquidationThresholdPeriodUpdate(_minimumBlocksBeforeLiquidation);\\n    }\\n\\n    function _updateOperatorFeeIncreaseLimit(uint64 newOperatorMaxFeeIncrease) private {\\n        _operatorMaxFeeIncrease = newOperatorMaxFeeIncrease;\\n\\n        emit OperatorFeeIncreaseLimitUpdate(_operatorMaxFeeIncrease);\\n\\n    }\\n\\n    function _updateDeclareOperatorFeePeriod(uint64 newDeclareOperatorFeePeriod) private {\\n        _declareOperatorFeePeriod = newDeclareOperatorFeePeriod;\\n\\n        emit DeclareOperatorFeePeriodUpdate(newDeclareOperatorFeePeriod);\\n    }\\n\\n    function _updateExecuteOperatorFeePeriod(uint64 newExecuteOperatorFeePeriod) private {\\n        _executeOperatorFeePeriod = newExecuteOperatorFeePeriod;\\n\\n        emit ExecuteOperatorFeePeriodUpdate(newExecuteOperatorFeePeriod);\\n    }\\n\\n    function _expensesOf(address ownerAddress) private view returns(uint64) {\\n        uint64 usage =  _owners[ownerAddress].used + _addressNetworkFee(ownerAddress);\\n        for (uint32 index = 0; index < _operatorsInUseList[ownerAddress].length; ++index) {\\n            OperatorInUse storage operatorInUseData = _operatorsInUseByAddress[ownerAddress][_operatorsInUseList[ownerAddress][index]];\\n            usage += _operatorInUseUsageOf(operatorInUseData, ownerAddress, _operatorsInUseList[ownerAddress][index]);\\n        }\\n\\n        return usage;\\n    }\\n\\n    function _totalEarningsOf(address ownerAddress) private view returns (uint64) {\\n        uint64 earnings = 0;\\n        uint32[] memory operatorsByOwner = _ssvRegistryContract.getOperatorsByOwnerAddress(ownerAddress);\\n        for (uint32 index = 0; index < operatorsByOwner.length; ++index) {\\n            earnings += _operatorEarningsOf(operatorsByOwner[index]);\\n        }\\n\\n        return earnings;\\n    }\\n\\n    function _totalBalanceOf(address ownerAddress) private view returns (uint64) {\\n        uint64 balance = _owners[ownerAddress].deposited + _totalEarningsOf(ownerAddress);\\n\\n        uint64 usage = _owners[ownerAddress].withdrawn + _expensesOf(ownerAddress);\\n\\n        if(balance < usage) {\\n            revert NegativeBalance();\\n        }\\n\\n        return balance - usage;\\n    }\\n\\n    function _operatorEarnRate(uint32 operatorId) private view returns (uint64) {\\n        return _ssvRegistryContract.getOperatorFee(operatorId) * _operatorDatas[operatorId].activeValidatorCount;\\n    }\\n\\n    /**\\n     * @dev See {ISSVNetwork-operatorEarningsOf}.\\n     */\\n    function _operatorEarningsOf(uint32 operatorId) private view returns (uint64) {\\n        return _operatorDatas[operatorId].earnings +\\n               uint64(block.number - _operatorDatas[operatorId].blockNumber) *\\n               _operatorEarnRate(operatorId);\\n    }\\n\\n    function _addressNetworkFee(address ownerAddress) private view returns (uint64) {\\n        return _owners[ownerAddress].networkFee +\\n              uint64(_currentNetworkFeeIndex() - _owners[ownerAddress].networkFeeIndex) *\\n              _owners[ownerAddress].activeValidatorCount;\\n    }\\n\\n    function _burnRate(address ownerAddress) private view returns (uint64 ownerBurnRate) {\\n        if (_owners[ownerAddress].validatorsDisabled) {\\n            return 0;\\n        }\\n\\n        for (uint32 index = 0; index < _operatorsInUseList[ownerAddress].length; ++index) {\\n            ownerBurnRate += _operatorInUseBurnRateWithNetworkFeeUnsafe(ownerAddress, _operatorsInUseList[ownerAddress][index]);\\n        }\\n\\n        ownerBurnRate += _owners[ownerAddress].activeValidatorCount * _networkFee;\\n\\n        uint32[] memory operatorsByOwner = _ssvRegistryContract.getOperatorsByOwnerAddress(ownerAddress);\\n\\n        for (uint32 index = 0; index < operatorsByOwner.length; ++index) {\\n            if (ownerBurnRate <= _operatorEarnRate(operatorsByOwner[index])) {\\n                return 0;\\n            } else {\\n                ownerBurnRate -= _operatorEarnRate(operatorsByOwner[index]);\\n            }\\n        }\\n    }\\n\\n    function _overdue(address ownerAddress) private view returns (bool) {\\n        return _totalBalanceOf(ownerAddress) < _minimumBlocksBeforeLiquidation * _burnRate(ownerAddress);\\n    }\\n\\n    function _liquidatable(address ownerAddress) private view returns (bool) {\\n        return !_owners[ownerAddress].validatorsDisabled && _overdue(ownerAddress);\\n    }\\n\\n    function _canLiquidate(address ownerAddress) private view returns (bool) {\\n        return !_owners[ownerAddress].validatorsDisabled && (msg.sender == ownerAddress || _overdue(ownerAddress));\\n    }\\n\\n    function _getTotalNetworkEarnings() private view returns (uint64) {\\n        uint256 result = _networkEarnings + (block.number - _networkEarningsBlockNumber) * _networkFee * _ssvRegistryContract.activeValidatorCount();\\n        return uint64(result);\\n    }\\n\\n    function _getNetworkEarnings() private view returns (uint64) {\\n        return _getTotalNetworkEarnings() - _withdrawnFromTreasury;\\n    }\\n\\n    /**\\n     * @dev Get operator index by address.\\n     */\\n    function _operatorIndexOf(uint32 operatorId) private view returns (uint64) {\\n        return _operatorDatas[operatorId].index +\\n               _ssvRegistryContract.getOperatorFee(operatorId) *\\n               uint64(block.number - _operatorDatas[operatorId].indexBlockNumber);\\n    }\\n\\n    function _operatorInUseUsageOf(OperatorInUse storage operatorInUseData, address ownerAddress, uint32 operatorId) private view returns (uint64) {\\n        return operatorInUseData.used + (\\n                _owners[ownerAddress].validatorsDisabled ? 0 :\\n                uint64(_operatorIndexOf(operatorId) - operatorInUseData.index) * operatorInUseData.validatorCount\\n               );\\n    }\\n\\n    function _operatorInUseBurnRateWithNetworkFeeUnsafe(address ownerAddress, uint32 operatorId) private view returns (uint64) {\\n        OperatorInUse storage operatorInUseData = _operatorsInUseByAddress[ownerAddress][operatorId];\\n        return _ssvRegistryContract.getOperatorFee(operatorId) * operatorInUseData.validatorCount;\\n    }\\n\\n    /**\\n     * @dev Returns the current network fee index\\n     */\\n    function _currentNetworkFeeIndex() private view returns(uint64) {\\n        return _networkFeeIndex + uint64(block.number - _networkFeeIndexBlockNumber) * _networkFee;\\n    }\\n\\n    function _onlyValidatorOwnerOrContractOwner(bytes calldata publicKey) private view {\\n        address validatorOwner = _ssvRegistryContract.getValidatorOwner(publicKey);\\n        if (validatorOwner == address(0)) {\\n            revert ValidatorWithPublicKeyNotExist();\\n        }\\n        if (msg.sender != validatorOwner && msg.sender != owner()) {\\n            revert CallerNotValidatorOwner();\\n        }\\n    }\\n\\n    function _onlyOperatorOwnerOrContractOwner(uint32 operatorId) private view {\\n        address operatorOwner = _ssvRegistryContract.getOperatorOwner(operatorId);\\n\\n        if(operatorOwner == address(0)) {\\n            revert OperatorWithPublicKeyNotExist();\\n        }\\n\\n        if(msg.sender != operatorOwner && msg.sender != owner()) {\\n            revert CallerNotOperatorOwner();\\n        }\\n    }\\n\\n    function _ensureMinimalOperatorFee(uint64 fee) private pure {\\n        if (fee < MINIMAL_OPERATOR_FEE) {\\n            revert FeeTooLow();\\n        }\\n    }\\n\\n    function version() external pure override returns (uint32) {\\n        return 20000;\\n    }\\n\\n    uint256[50] ______gap;\\n}\",\"keccak256\":\"0xd31c8dedc1ae5d6ef9cf1f53ab08c810f26c5b09dc81de5cc3ce72158593d185\",\"license\":\"GPL-3.0\"},\"contracts/utils/Types.sol\":{\"content\":\"// File: contracts/SSVNetwork.sol\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.2;\\n\\nuint64 constant DEDUCTED_DIGITS = 10000000;\\n\\nlibrary Types64 {\\n  function expand(uint64 value) internal pure returns (uint256) {\\n    return uint256(value) * DEDUCTED_DIGITS;\\n  }\\n}\\n\\nlibrary Types256 {\\n  function shrink(uint256 value) internal pure returns (uint64) {\\n    require(value % DEDUCTED_DIGITS == 0, \\\"Precision is over the maximum defined\\\");\\n    return uint64(value / DEDUCTED_DIGITS);\\n  }\\n}\",\"keccak256\":\"0xb1993a39ce02ceff079863cec8ee5021d6b2cc41e2c6833b0497d765fc49b34b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/VersionedContract.sol\":{\"content\":\"// File: contracts/utils/VersionedContract.sol\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.2;\\n\\ninterface VersionedContract {\\n  function version() external pure returns (uint32);\\n}\\n\",\"keccak256\":\"0x1499a18da7350a5c33029142db87635ea9c6c83d4a81a1dab4e45969f762f57d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061570e80620000216000396000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c806368465f7d11610186578063a985994b116100e3578063dd83fcb611610097578063f2fde38b11610071578063f2fde38b1461066e578063f8f08d7f14610681578063fc0438301461069457600080fd5b8063dd83fcb61461062a578063e40cb19d14610648578063eb6080221461065b57600080fd5b8063b2f569c5116100c8578063b2f569c5146105f1578063d223174114610604578063d379a5f21461061757600080fd5b8063a985994b146105cb578063b083ab35146105de57600080fd5b8063853828b61161013a5780638da5cb5b1161011f5780638da5cb5b146105475780639040f7c314610562578063a3b3f6061461058c57600080fd5b8063853828b614610511578063857475661461051957600080fd5b8063715018a61161016b578063715018a6146104ee578063777915cb146104f657806379e3e4e4146104fe57600080fd5b806368465f7d146104c957806370f97314146104db57600080fd5b80632e1d2f051161023f57806347e7ef24116101f357806357c7ce22116101cd57806357c7ce22146104835780635f10ac30146104a35780636512447d146104b657600080fd5b806347e7ef241461044457806354fd4d501461045757806356d9a2cc1461047057600080fd5b80633631983f116102245780633631983f1461040b57806336881f181461041e578063400aa7ce1461043157600080fd5b80632e1d2f05146103e557806335046722146103f857600080fd5b80631f1f9fd5116102965780632563c64e1161027b5780632563c64e146103ac5780632afe872f146103bf5780632e1a7d4d146103d257600080fd5b80631f1f9fd51461038657806321f7957b1461039957600080fd5b8063053e8349116102c7578063053e834914610335578063154996bb146103555780631be2bd741461036a57600080fd5b80630260d443146102e3578063042e02cf14610312575b600080fd5b6102f66102f1366004614828565b61069c565b604051610309979695949392919061489d565b60405180910390f35b61032561032036600461490f565b610750565b6040519015158152602001610309565b6103486103433660046149b4565b610761565b6040516103099190614a34565b610368610363366004614828565b6107f0565b005b60705467ffffffffffffffff165b604051908152602001610309565b610368610394366004614a7e565b610866565b6103686103a7366004614b25565b610964565b6103786103ba36600461490f565b6109cf565b6103686103cd366004614a7e565b6109ec565b6103686103e0366004614a7e565b610ac9565b6103686103f3366004614828565b610b7b565b61037861040636600461490f565b610ce3565b610368610419366004614c07565b610cf1565b61036861042c366004614c24565b610d54565b61036861043f366004614828565b610e0f565b610368610452366004614ca6565b610f6d565b614e205b60405163ffffffff9091168152602001610309565b61037861047e36600461490f565b610f7b565b61049661049136600461490f565b610f96565b6040516103099190614cd2565b6103686104b1366004614d52565b611022565b6103686104c4366004614c07565b611149565b60675467ffffffffffffffff16610378565b6103686104e9366004614d8b565b6111f2565b610368611422565b610378611488565b61036861050c366004614c07565b61149a565b6103686114fd565b61052c610527366004614828565b611556565b60408051938452602084019290925290820152606001610309565b6033546040516001600160a01b039091168152602001610309565b60665474010000000000000000000000000000000000000000900467ffffffffffffffff16610378565b61032561059a36600461490f565b6001600160a01b03166000908152606d60205260409020600101546c01000000000000000000000000900460ff1690565b6103686105d9366004614da9565b61159b565b61045b6105ec366004614deb565b6116ec565b6103686105ff366004614e5f565b6118aa565b610368610612366004614a7e565b611917565b61045b610625366004614828565b611ae2565b60705468010000000000000000900467ffffffffffffffff16610378565b610368610656366004614b25565b611b6e565b610368610669366004614c07565b611b9c565b61036861067c36600461490f565b611bff565b61037861068f366004614828565b611cde565b610378611d70565b6065546040517f0260d44300000000000000000000000000000000000000000000000000000000815263ffffffff83166004820152606091600091839183918291829182916001600160a01b031690630260d44390602401600060405180830381865afa158015610711573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107399190810190614f00565b959e949d50929b5090995097509550909350915050565b600061075b82611d95565b92915050565b6065546040517f053e83490000000000000000000000000000000000000000000000000000000081526060916001600160a01b03169063053e8349906107ab908590600401614fb9565b600060405180830381865afa1580156107c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075b9190810190614ff0565b806107fa81611dd5565b63ffffffff82166000818152607160209081526040808320805467ffffffffffffffff191681556001810184905560020192909255905191825233917fb5c93858369b86b0bdf3a8c475316d42d2cd139306d28b3d5d4123b9b867455c91015b60405180910390a25050565b6033546001600160a01b031633146108c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6067547fb12de2022a8c992455195d1cdfe49c528c96a325adc99e12b6eab59d56654ea2906109099068010000000000000000900467ffffffffffffffff16611efe565b60408051918252602082018490520160405180910390a1610928611f17565b610930611f47565b61093981611fa3565b606760086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b88886109708282612032565b6109b0338c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061216192505050565b6109c2338c8c8c8c8c8c8c8c8c6122ac565b5050505050505050505050565b600061075b6109dd83612523565b67ffffffffffffffff16611efe565b336000908152606d60205260409020600101546c01000000000000000000000000900460ff16610a48576040517f44fab0e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a523382612787565b610a5b336128ce565b610a6433611d95565b15610a9b576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405133907fd2cad6abfa380a10a84c0e561544f8deb6eea7dd29a411fa306f902aa6ac5eca90600090a250565b610ad281611fa3565b67ffffffffffffffff16610ae533612acc565b67ffffffffffffffff161015610b27576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b38610b3382611fa3565b612bad565b610b4133611d95565b15610b78576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b80610b8581611dd5565b6065546040517fe7b2174800000000000000000000000000000000000000000000000000000000815263ffffffff841660048201526000916001600160a01b03169063e7b2174890602401602060405180830381865afa158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c11919061508a565b9050610c1e836000612d14565b6065546040517f2e1d2f0500000000000000000000000000000000000000000000000000000000815263ffffffff851660048201526001600160a01b0390911690632e1d2f0590602401600060405180830381600087803b158015610c8257600080fd5b505af1158015610c96573d6000803e3d6000fd5b505060405163ffffffff861681526001600160a01b03841692507f10b90e3d042178ee9b3e99a849224b4bf4145b9855274073c0c6bca9c5113b7b915060200160405180910390a2505050565b600061075b6109dd83612acc565b6033546001600160a01b03163314610d4b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b610b7881612dc9565b6000610d606001612e19565b90508015610d9557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610da3878787878787612f70565b8015610e0657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b80610e1981611dd5565b63ffffffff821660009081526071602052604081208054909167ffffffffffffffff9091169003610e76576040517fa6cae01600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010154421080610e8b5750806002015442115b15610ec2576040517f97e4b51800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8054610ed990849067ffffffffffffffff16612d14565b805433907f5e68243d185e61c61d839a6eb781a865dd007c0004b0c1f5f544e4291e7ee96d9085904390610f169067ffffffffffffffff16611efe565b6040805163ffffffff909416845260208401929092529082015260600160405180910390a2505063ffffffff166000908152607160205260408120805467ffffffffffffffff191681556001810182905560020155565b610f778282612787565b5050565b6000610f8682612fc7565b67ffffffffffffffff1692915050565b6065546040517f0e32066a0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526060921690630e32066a90602401600060405180830381865afa158015610ffa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075b91908101906150a7565b6033546001600160a01b0316331461107c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b6065546040517f5f10ac3000000000000000000000000000000000000000000000000000000000815263ffffffff8085166004830152831660248201526001600160a01b0390911690635f10ac3090604401600060405180830381600087803b1580156110e857600080fd5b505af11580156110fc573d6000803e3d6000fd5b50506040805163ffffffff80871682524360208301528516918101919091523392507fc07e279e1b82e9c5a89dc92f0d0fb3ec87c142b3cc1a27411ab82156beef8c36915060600161085a565b6033546001600160a01b031633146111a35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b6119aa67ffffffffffffffff821610156111e9576040517fb4cce01300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b7881613065565b816111fc81611dd5565b8161120e61120982611fa3565b6130e9565b606754612710906112299067ffffffffffffffff1682615187565b6065546040517ff8f08d7f00000000000000000000000000000000000000000000000000000000815263ffffffff881660048201526001600160a01b039091169063f8f08d7f90602401602060405180830381865afa158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b491906151b3565b6112be91906151d0565b6112c8919061522f565b67ffffffffffffffff166112db84611fa3565b67ffffffffffffffff16111561131d576040517f958065d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806060016040528061133185611fa3565b67ffffffffffffffff9081168252607054602090920191611353911642615256565b815260705460209091019067ffffffffffffffff680100000000000000008204811691611381911642615256565b61138b9190615256565b905263ffffffff85166000818152607160209081526040918290208451815467ffffffffffffffff191667ffffffffffffffff909116178155848201516001820155938201516002909401939093558051918252439282019290925290810184905233907f4892696cd76ab5f9fa4578747dee737eb9061eb170dab27ac24d78f47d3eec599060600160405180910390a250505050565b6033546001600160a01b0316331461147c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b611486600061312f565b565b60006114956109dd613199565b905090565b6033546001600160a01b031633146114f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b610b78816131bb565b600061150833612523565b67ffffffffffffffff16111561154a576040517ff457a87800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611486610b3333612acc565b63ffffffff811660009081526071602052604081208054829182916115849067ffffffffffffffff16611efe565b600182015460029092015490969195509350915050565b6000805b63ffffffff8116831115611639576115e284848363ffffffff168181106115c8576115c861526e565b90506020020160208101906115dd919061490f565b61320b565b156116295761161c84848363ffffffff168181106116025761160261526e565b9050602002016020810190611617919061490f565b61325d565b6116269083615187565b91505b6116328161529d565b905061159f565b506066546001600160a01b031663a9059cbb3361165f67ffffffffffffffff8516611efe565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156116c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e691906152c0565b50505050565b6000816116fb61120982611fa3565b6065546001600160a01b031663580ee1b8888833898961171a8a611fa3565b6040518763ffffffff1660e01b815260040161173b96959493929190615306565b6020604051808303816000875af115801561175a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177e919061535a565b6040805160a0810182524380825260006020808401828152848601838152606086019485526080860184815263ffffffff808a16808752606c90955297909420955186559051600186018054925167ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909416921691909117919091179055915160028401555160039092018054929093167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009092169190911790915590925033907f26a77904793977b23eb8b2d412c486276510e0dc1966a4a2936d4bea0ff86e9d898989896118876109dd8b611fa3565b604051611898959493929190615377565b60405180910390a35095945050505050565b81816118b68282612032565b6118be611f17565b6118c733613320565b6119073385858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061216192505050565b61191033612acc565b5050505050565b6033546001600160a01b031633146119715760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b611979613199565b67ffffffffffffffff1661198c82611fa3565b67ffffffffffffffff1611156119ce576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6119d781611fa3565b606b80546000906119f390849067ffffffffffffffff16615187565b825467ffffffffffffffff9182166101009390930a9283029190920219909116179055506066546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa591906152c0565b50604080518281523360208201527f5564de4b05294182a45c60836e9c0ba86d5c351cf1c0db79e4fe5dd04786de1a91015b60405180910390a150565b6065546040517fd379a5f200000000000000000000000000000000000000000000000000000000815263ffffffff831660048201526000916001600160a01b03169063d379a5f290602401602060405180830381865afa158015611b4a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075b919061535a565b611b76611f17565b611b7f33613320565b611b91338a8a8a8a8a8a8a8a8a6122ac565b505050505050505050565b6033546001600160a01b03163314611bf65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b610b78816133d3565b6033546001600160a01b03163314611c595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b6001600160a01b038116611cd55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108bc565b610b788161312f565b6065546040517ff8f08d7f00000000000000000000000000000000000000000000000000000000815263ffffffff8316600482015260009161075b916001600160a01b039091169063f8f08d7f90602401602060405180830381865afa158015611d4c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dd91906151b3565b6067546000906114959068010000000000000000900467ffffffffffffffff16611efe565b6001600160a01b0381166000908152606d60205260408120600101546c01000000000000000000000000900460ff1615801561075b575061075b82613448565b6065546040517fe7b2174800000000000000000000000000000000000000000000000000000000815263ffffffff831660048201526000916001600160a01b03169063e7b2174890602401602060405180830381865afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e61919061508a565b90506001600160a01b038116611ea3576040517fd5528c8600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614801590611ec757506033546001600160a01b03163314155b15610f77576040517fec4de4c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061075b6298968067ffffffffffffffff84166153b1565b611f1f6134a6565b6069805467ffffffffffffffff191667ffffffffffffffff9290921691909117905543606a55565b611f4f613580565b6067805467ffffffffffffffff92909216700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff90921691909117905543606855565b6000611fb262989680836153ee565b156120255760405162461bcd60e51b815260206004820152602560248201527f507265636973696f6e206973206f76657220746865206d6178696d756d20646560448201527f66696e656400000000000000000000000000000000000000000000000000000060648201526084016108bc565b61075b6298968083615402565b6065546040517fc87b30380000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063c87b30389061207e9086908690600401615416565b602060405180830381865afa15801561209b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bf919061508a565b90506001600160a01b038116612101576040517f8791c3b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b0382161480159061212557506033546001600160a01b03163314155b1561215c576040517f11ecf9f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b61216b82826135df565b6065546040517fb2f569c50000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b2f569c5906121b4908490600401614fb9565b600060405180830381600087803b1580156121ce57600080fd5b505af11580156121e2573d6000803e3d6000fd5b505050506001600160a01b0382166000908152606d60205260409020600101546c01000000000000000000000000900460ff16612273576001600160a01b0382166000908152606d6020526040902060010180546008906122549068010000000000000000900463ffffffff1661542a565b91906101000a81548163ffffffff021916908363ffffffff1602179055505b816001600160a01b03167f671ada3835502b9498e4a3116c344293ec3a4ef43f90bb42283d7d66a3f772b28260405161085a9190614fb9565b6065546040517f9b4ddb5d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690639b4ddb5d90612305908d908d908d908d908d908d908d908d908d9060040161555d565b600060405180830381600087803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050506001600160a01b038a166000908152606d6020526040902060018101546c01000000000000000000000000900460ff166123ae5760018101805460089061238f9068010000000000000000900463ffffffff1661529d565b91906101000a81548163ffffffff021916908363ffffffff1602179055505b60005b63ffffffff811688111561247657600089898363ffffffff168181106123d9576123d961526e565b90506020020160208101906123ee9190614828565b90506123f981613743565b60018301546c01000000000000000000000000900460ff1661245b5763ffffffff8082166000908152606c602052604081206003018054909261243c911661529d565b91906101000a81548163ffffffff021916908363ffffffff1602179055505b6124658d8261378b565b5061246f8161529d565b90506123b1565b508115612487576124873383612787565b6124908b611d95565b156124c7576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8a6001600160a01b03167f888b4bb563730efc1c420fb22b503c3551134948a3a3dce4ffab6380e9ce50258b8b8b8b8b8b8b8b60405161250e9897969594939291906155cd565b60405180910390a25050505050505050505050565b6001600160a01b0381166000908152606d60205260408120600101546c01000000000000000000000000900460ff161561255f57506000919050565b60005b6001600160a01b0383166000908152606f602052604090205463ffffffff82161015612605576001600160a01b0383166000908152606f6020526040902080546125e991859163ffffffff85169081106125be576125be61526e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16613797565b6125f39083615187565b91506125fe8161529d565b9050612562565b506067546001600160a01b0383166000908152606d602052604090206001015461264e91680100000000000000009081900467ffffffffffffffff16910463ffffffff166151d0565b6126589082615187565b6065546040517f0dc1eeff0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015292935060009290911690630dc1eeff90602401600060405180830381865afa1580156126c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126e99190810190614ff0565b905060005b81518163ffffffff16101561278057612725828263ffffffff16815181106127185761271861526e565b602002602001015161386c565b67ffffffffffffffff168367ffffffffffffffff1611612749575060009392505050565b612764828263ffffffff16815181106127185761271861526e565b61276e908461562d565b92506127798161529d565b90506126ee565b5050919050565b6066546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156127f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281b91906152c0565b5061282581611fa3565b6001600160a01b0383166000908152606d60205260408120805490919061285790849067ffffffffffffffff16615187565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550336001600160a01b0316826001600160a01b03167fb91f78378ad1ce7b5c12301896eac25f50d4603d0301406595e6fdfa6ffd6419836040516128c291815260200190565b60405180910390a35050565b6128d6611f17565b6128df81613320565b60005b6001600160a01b0382166000908152606f602052604090205463ffffffff82161015612a11576001600160a01b0382166000908152606f60205260408120805463ffffffff84169081106129385761293861526e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905061296981613743565b6001600160a01b0383166000908152606e6020908152604080832063ffffffff85168452909152902061299d81858461391e565b805463ffffffff8381166000908152606c60205260408120600301805470010000000000000000000000000000000090940483169390926129e091859116615656565b92506101000a81548163ffffffff021916908363ffffffff160217905550505080612a0a9061529d565b90506128e2565b506065546040517f45413bf40000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152909116906345413bf490602401600060405180830381600087803b158015612a7257600080fd5b505af1158015612a86573d6000803e3d6000fd5b505050506001600160a01b03166000908152606d6020526040902060010180547fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff169055565b600080612ad883613995565b6001600160a01b0384166000908152606d6020526040902054612b05919067ffffffffffffffff16615187565b90506000612b1284613a88565b6001600160a01b0385166000908152606d6020526040902054612b4b919068010000000000000000900467ffffffffffffffff16615187565b90508067ffffffffffffffff168267ffffffffffffffff161015612b9b576040517f5e13ed3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ba5818361562d565b949350505050565b336000908152606d602052604090208054829190600890612be590849068010000000000000000900467ffffffffffffffff16615187565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550606660009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb33612c438467ffffffffffffffff16611efe565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015612ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cca91906152c0565b50337f233f5518707099d7be7f52de7c8094100dae65f0c896a762ebcc5900370d66bc612d0067ffffffffffffffff8416611efe565b60405190815260200160405180910390a250565b63ffffffff82166000908152606c60205260409020612d3283613c10565b436002820155612d4183613743565b6065546040517f8515736100000000000000000000000000000000000000000000000000000000815263ffffffff8516600482015267ffffffffffffffff841660248201526001600160a01b0390911690638515736190604401600060405180830381600087803b158015612db557600080fd5b505af1158015610e06573d6000803e3d6000fd5b6067805467ffffffffffffffff191667ffffffffffffffff83169081179091556040519081527f65703aa387fec070bf1ec4b824c8faee64d3ad3e45b03c119727391b06d168a790602001611ad7565b60008054610100900460ff1615612eb6578160ff166001148015612e3c5750303b155b612eae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108bc565b506000919050565b60005460ff808416911610612f335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108bc565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b6000612f7c6001612e19565b90508015612fb157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b612fb9613c78565b610da3878787878787613cfe565b6001600160a01b0381166000908152606d602052604081206001015463ffffffff680100000000000000008204169067ffffffffffffffff16613008613580565b613012919061562d565b61301c91906151d0565b6001600160a01b0383166000908152606d602052604090205461075b91907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16615187565b606680547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000067ffffffffffffffff8481168202929092179283905560405192041681527f0ba69538f9785fc112824ff736c1e58ccf880282e09e53d7eef96598e282d3fa90602001611ad7565b6103e867ffffffffffffffff82161015610b78576040517f732f941300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606b5460009067ffffffffffffffff166131b16134a6565b611495919061562d565b6070805467ffffffffffffffff191667ffffffffffffffff83169081179091556040519081527fcaf8245d4ec588ab95e4db438be7dde364ed732720724028fefc713816d5371190602001611ad7565b6001600160a01b0381166000908152606d60205260408120600101546c01000000000000000000000000900460ff1615801561075b5750336001600160a01b038316148061075b575061075b82613448565b600061326882613def565b600061327383612acc565b6001600160a01b0384166000908152606d60205260409020805491925082916010906132be908490700100000000000000000000000000000000900467ffffffffffffffff16615187565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550826001600160a01b03167f4fa857769e6aa8d98c53ea164735f03821828e6672f227ea817ec1e74d61c34360405160405180910390a292915050565b61332981612fc7565b6001600160a01b0382166000908152606d60205260409020805467ffffffffffffffff9290921678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055613395613580565b6001600160a01b03919091166000908152606d60205260409020600101805467ffffffffffffffff191667ffffffffffffffff909216919091179055565b607080547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff8416908102919091179091556040519081527f274c410ee0d5c156c7b7a46ff059b0df2394a5943e30bca4d54f01fb78a91c0790602001611ad7565b600061345382612523565b606654613482919074010000000000000000000000000000000000000000900467ffffffffffffffff166151d0565b67ffffffffffffffff1661349583612acc565b67ffffffffffffffff161092915050565b600080606560009054906101000a90046001600160a01b03166001600160a01b0316632340e8d36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613520919061535a565b63ffffffff16606760089054906101000a900467ffffffffffffffff1667ffffffffffffffff16606a54436135559190615675565b61355f91906153b1565b61356991906153b1565b60695461075b919067ffffffffffffffff16615256565b60675460685460009168010000000000000000900467ffffffffffffffff16906135aa9043615675565b6135b491906151d0565b6067546114959190700100000000000000000000000000000000900467ffffffffffffffff16615187565b6065546040517f053e83490000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063053e834990613629908590600401614fb9565b600060405180830381865afa158015613646573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261366e9190810190614ff0565b905060005b81518163ffffffff1610156116e6576000828263ffffffff168151811061369c5761369c61526e565b602002602001015190506136af81613743565b6001600160a01b0385166000908152606d60205260409020600101546c01000000000000000000000000900460ff166137285763ffffffff8082166000908152606c6020526040812060030180549092613709911661542a565b91906101000a81548163ffffffff021916908363ffffffff1602179055505b6137328582613ffe565b5061373c8161529d565b9050613673565b63ffffffff81166000908152606c602052604090206137618261400a565b60018201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905543905550565b610f778282600161406c565b6001600160a01b038281166000908152606e6020908152604080832063ffffffff86811680865291909352818420805460655493517ff8f08d7f000000000000000000000000000000000000000000000000000000008152600481019390935294959094700100000000000000000000000000000000900490931692919091169063f8f08d7f90602401602060405180830381865afa15801561383e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386291906151b3565b612ba591906151d0565b63ffffffff8181166000818152606c60205260408082206003015460655491517ff8f08d7f0000000000000000000000000000000000000000000000000000000081526004810194909452919391909116916001600160a01b039091169063f8f08d7f90602401602060405180830381865afa1580156138f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391491906151b3565b61075b91906151d0565b61392983838361467a565b835467ffffffffffffffff9190911668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff90911617835561397381614725565b835467ffffffffffffffff191667ffffffffffffffff91909116179092555050565b6065546040517f0dc1eeff0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000928392839290911690630dc1eeff90602401600060405180830381865afa1580156139ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a279190810190614ff0565b905060005b81518163ffffffff161015613a7f57613a63828263ffffffff1681518110613a5657613a5661526e565b602002602001015161400a565b613a6d9084615187565b9250613a788161529d565b9050613a2c565b50909392505050565b600080613a9483612fc7565b6001600160a01b0384166000908152606d6020526040902054613ad59190700100000000000000000000000000000000900467ffffffffffffffff16615187565b905060005b6001600160a01b0384166000908152606f602052604090205463ffffffff82161015613c09576001600160a01b0384166000908152606e60209081526040808320606f9092528220805483919063ffffffff8616908110613b3d57613b3d61526e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020016000209050613beb8186606f6000896001600160a01b03166001600160a01b031681526020019081526020016000208563ffffffff1681548110613bc057613bc061526e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1661467a565b613bf59084615187565b92505080613c029061529d565b9050613ada565b5092915050565b613c1981614725565b63ffffffff9091166000908152606c60205260409020600101805467ffffffffffffffff9290921668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff909216919091179055565b600054610100900460ff16613cf55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108bc565b6114863361312f565b600054610100900460ff16613d7b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108bc565b606580546001600160a01b038089167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556066805492881692909116919091179055613dcc84613065565b613dd583612dc9565b613dde826131bb565b613de7816133d3565b505050505050565b613df7611f17565b613e0081613320565b60005b6001600160a01b0382166000908152606f602052604090205463ffffffff82161015613f32576001600160a01b0382166000908152606f60205260408120805463ffffffff8416908110613e5957613e5961526e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050613e8a81613743565b6001600160a01b0383166000908152606e6020908152604080832063ffffffff851684529091529020613ebe81858461391e565b805463ffffffff8381166000908152606c6020526040812060030180547001000000000000000000000000000000009094048316939092613f019185911661568c565b92506101000a81548163ffffffff021916908363ffffffff160217905550505080613f2b9061529d565b9050613e03565b506065546040517f27467a180000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152909116906327467a1890602401600060405180830381600087803b158015613f9357600080fd5b505af1158015613fa7573d6000803e3d6000fd5b5050506001600160a01b039091166000908152606d6020526040902060010180547fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff166c0100000000000000000000000017905550565b610f778282600061406c565b60006140158261386c565b63ffffffff83166000908152606c60205260409020546140359043615675565b61403f91906151d0565b63ffffffff83166000908152606c602052604090206001015461075b919067ffffffffffffffff16615187565b6001600160a01b0383166000908152606e6020908152604080832063ffffffff86168452909152902080547801000000000000000000000000000000000000000000000000900460ff1615614451576140c681858561391e565b811561411957805481906010906140f690700100000000000000000000000000000000900463ffffffff1661529d565b91906101000a81548163ffffffff021916908363ffffffff1602179055506116e6565b8054819060109061414390700100000000000000000000000000000000900463ffffffff1661542a565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff1660000361444c5780546001600160a01b0385166000908152606d60205260409020805467ffffffffffffffff680100000000000000009093048316926010916141c5918591700100000000000000000000000000000000900416615187565b825467ffffffffffffffff9182166101009390930a9283029190920219909116179055506001600160a01b0384166000908152606f60205260409020805461420f90600190615675565b8154811061421f5761421f61526e565b600091825260208083206008830401546001600160a01b0388168452606f90915260409092208354815460079093166004026101000a90930463ffffffff908116939192740100000000000000000000000000000000000000009092041690811061428c5761428c61526e565b600091825260208083206008830401805460079093166004026101000a63ffffffff81810219909416958416029490941790935583546001600160a01b0388168352606e84526040808420606f909552832080547401000000000000000000000000000000000000000090920490921693929190849081106143105761431061526e565b6000918252602080832060088304015463ffffffff60046007909416939093026101000a900482168452838101949094526040928301822080549590911674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909516949094179093556001600160a01b0387168352606f90915290208054806143b2576143b26156a9565b6000828152602080822060087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90940193840401805463ffffffff600460078716026101000a810219909116909155929093556001600160a01b0387168152606e83526040808220928716825291909252902080547fffffffffffffff000000000000000000000000000000000000000000000000001690555b6116e6565b6001600160a01b0384166000908152606f6020526040902054603210156144a4576040517f9722180300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052806144b885614725565b67ffffffffffffffff908116825260006020808401829052600160408086018290526001600160a01b038b16808552606f808552828620805463ffffffff9081166060808c019190915260809a8b01879052938852606e87528488208e8216808a529088528589208c5181548e8b0151988f0151978f01519e909d015115157801000000000000000000000000000000000000000000000000027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff9e851674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff98861670010000000000000000000000000000000002989098167fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff998e1668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909f1692909d16919091179c909c1796909616999099179390931799909916979097179091559482528554908101865594825290206008840401805460046007909516949094026101000a918202919092021990921691909117905550505050565b6001600160a01b0382166000908152606d60205260408120600101546c01000000000000000000000000900460ff166146f657835463ffffffff7001000000000000000000000000000000008204169067ffffffffffffffff166146dd84614725565b6146e7919061562d565b6146f191906151d0565b6146f9565b60005b845461471b919068010000000000000000900467ffffffffffffffff16615187565b90505b9392505050565b63ffffffff81166000908152606c60205260408120600201546147489043615675565b6065546040517ff8f08d7f00000000000000000000000000000000000000000000000000000000815263ffffffff851660048201526001600160a01b039091169063f8f08d7f90602401602060405180830381865afa1580156147af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147d391906151b3565b6147dd91906151d0565b63ffffffff83166000908152606c602052604090206001015461075b919068010000000000000000900467ffffffffffffffff16615187565b63ffffffff81168114610b7857600080fd5b60006020828403121561483a57600080fd5b813561471e81614816565b60005b83811015614860578181015183820152602001614848565b838111156116e65750506000910152565b60008151808452614889816020860160208601614845565b601f01601f19169290920160200192915050565b60e0815260006148b060e083018a614871565b6001600160a01b038916602084015282810360408401526148d18189614871565b9150508560608301528460808301528360a083015282151560c083015298975050505050505050565b6001600160a01b0381168114610b7857600080fd5b60006020828403121561492157600080fd5b813561471e816148fa565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156149845761498461492c565b604052919050565b600067ffffffffffffffff8211156149a6576149a661492c565b50601f01601f191660200190565b6000602082840312156149c657600080fd5b813567ffffffffffffffff8111156149dd57600080fd5b8201601f810184136149ee57600080fd5b8035614a016149fc8261498c565b61495b565b818152856020838501011115614a1657600080fd5b81602084016020830137600091810160200191909152949350505050565b6020808252825182820181905260009190848201906040850190845b81811015614a7257835163ffffffff1683529284019291840191600101614a50565b50909695505050505050565b600060208284031215614a9057600080fd5b5035919050565b60008083601f840112614aa957600080fd5b50813567ffffffffffffffff811115614ac157600080fd5b602083019150836020828501011115614ad957600080fd5b9250929050565b60008083601f840112614af257600080fd5b50813567ffffffffffffffff811115614b0a57600080fd5b6020830191508360208260051b8501011115614ad957600080fd5b600080600080600080600080600060a08a8c031215614b4357600080fd5b893567ffffffffffffffff80821115614b5b57600080fd5b614b678d838e01614a97565b909b50995060208c0135915080821115614b8057600080fd5b614b8c8d838e01614ae0565b909950975060408c0135915080821115614ba557600080fd5b614bb18d838e01614ae0565b909750955060608c0135915080821115614bca57600080fd5b50614bd78c828d01614ae0565b9a9d999c50979a9699959894979660800135949350505050565b67ffffffffffffffff81168114610b7857600080fd5b600060208284031215614c1957600080fd5b813561471e81614bf1565b60008060008060008060c08789031215614c3d57600080fd5b8635614c48816148fa565b95506020870135614c58816148fa565b94506040870135614c6881614bf1565b93506060870135614c7881614bf1565b92506080870135614c8881614bf1565b915060a0870135614c9881614bf1565b809150509295509295509295565b60008060408385031215614cb957600080fd5b8235614cc4816148fa565b946020939093013593505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614d45577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452614d33858351614871565b94509285019290850190600101614cf9565b5092979650505050505050565b60008060408385031215614d6557600080fd5b8235614d7081614816565b91506020830135614d8081614816565b809150509250929050565b60008060408385031215614d9e57600080fd5b8235614cc481614816565b60008060208385031215614dbc57600080fd5b823567ffffffffffffffff811115614dd357600080fd5b614ddf85828601614ae0565b90969095509350505050565b600080600080600060608688031215614e0357600080fd5b853567ffffffffffffffff80821115614e1b57600080fd5b614e2789838a01614a97565b90975095506020880135915080821115614e4057600080fd5b50614e4d88828901614a97565b96999598509660400135949350505050565b60008060208385031215614e7257600080fd5b823567ffffffffffffffff811115614e8957600080fd5b614ddf85828601614a97565b6000614ea36149fc8461498c565b9050828152838383011115614eb757600080fd5b61471e836020830184614845565b8051612f6b816148fa565b600082601f830112614ee157600080fd5b61471e83835160208501614e95565b80518015158114612f6b57600080fd5b600080600080600080600060e0888a031215614f1b57600080fd5b875167ffffffffffffffff80821115614f3357600080fd5b818a0191508a601f830112614f4757600080fd5b614f568b835160208501614e95565b9850614f6460208b01614ec5565b975060408a0151915080821115614f7a57600080fd5b50614f878a828b01614ed0565b955050606088015193506080880151925060a08801519150614fab60c08901614ef0565b905092959891949750929550565b60208152600061471e6020830184614871565b600067ffffffffffffffff821115614fe657614fe661492c565b5060051b60200190565b6000602080838503121561500357600080fd5b825167ffffffffffffffff81111561501a57600080fd5b8301601f8101851361502b57600080fd5b80516150396149fc82614fcc565b81815260059190911b8201830190838101908783111561505857600080fd5b928401925b8284101561507f57835161507081614816565b8252928401929084019061505d565b979650505050505050565b60006020828403121561509c57600080fd5b815161471e816148fa565b600060208083850312156150ba57600080fd5b825167ffffffffffffffff808211156150d257600080fd5b818501915085601f8301126150e657600080fd5b81516150f46149fc82614fcc565b81815260059190911b8301840190848101908883111561511357600080fd5b8585015b8381101561514b5780518581111561512f5760008081fd5b61513d8b89838a0101614ed0565b845250918601918601615117565b5098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff8083168185168083038211156151aa576151aa615158565b01949350505050565b6000602082840312156151c557600080fd5b815161471e81614bf1565b600067ffffffffffffffff808316818516818304811182151516156151f7576151f7615158565b02949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600067ffffffffffffffff8084168061524a5761524a615200565b92169190910492915050565b6000821982111561526957615269615158565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600063ffffffff8083168181036152b6576152b6615158565b6001019392505050565b6000602082840312156152d257600080fd5b61471e82614ef0565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60808152600061531a60808301888a6152db565b6001600160a01b0387166020840152828103604084015261533c8186886152db565b91505067ffffffffffffffff83166060830152979650505050505050565b60006020828403121561536c57600080fd5b815161471e81614816565b60608152600061538b6060830187896152db565b828103602084015261539e8186886152db565b9150508260408301529695505050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156153e9576153e9615158565b500290565b6000826153fd576153fd615200565b500690565b60008261541157615411615200565b500490565b60208152600061471b6020830184866152db565b600063ffffffff82168061544057615440615158565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b8183526000602080850194508260005b858110156154a357813561548b81614816565b63ffffffff1687529582019590820190600101615478565b509495945050505050565b81835260006020808501808196508560051b810191508460005b8781101561555057828403895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe188360301811261550757600080fd5b8701803567ffffffffffffffff81111561552057600080fd5b80360389131561552f57600080fd5b61553c86828985016152db565b9a87019a95505050908401906001016154c8565b5091979650505050505050565b6001600160a01b038a16815260a06020820152600061558060a083018a8c6152db565b828103604084015261559381898b615468565b905082810360608401526155a88187896154ae565b905082810360808401526155bd8185876154ae565b9c9b505050505050505050505050565b6080815260006155e1608083018a8c6152db565b82810360208401526155f481898b615468565b905082810360408401526156098187896154ae565b9050828103606084015261561e8185876154ae565b9b9a5050505050505050505050565b600067ffffffffffffffff8381169083168181101561564e5761564e615158565b039392505050565b600063ffffffff8083168185168083038211156151aa576151aa615158565b60008282101561568757615687615158565b500390565b600063ffffffff8381169083168181101561564e5761564e615158565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122099d141bc7d9391020965584bd40efe2c049e1df57276f076674cbb6ab83eaa1864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c806368465f7d11610186578063a985994b116100e3578063dd83fcb611610097578063f2fde38b11610071578063f2fde38b1461066e578063f8f08d7f14610681578063fc0438301461069457600080fd5b8063dd83fcb61461062a578063e40cb19d14610648578063eb6080221461065b57600080fd5b8063b2f569c5116100c8578063b2f569c5146105f1578063d223174114610604578063d379a5f21461061757600080fd5b8063a985994b146105cb578063b083ab35146105de57600080fd5b8063853828b61161013a5780638da5cb5b1161011f5780638da5cb5b146105475780639040f7c314610562578063a3b3f6061461058c57600080fd5b8063853828b614610511578063857475661461051957600080fd5b8063715018a61161016b578063715018a6146104ee578063777915cb146104f657806379e3e4e4146104fe57600080fd5b806368465f7d146104c957806370f97314146104db57600080fd5b80632e1d2f051161023f57806347e7ef24116101f357806357c7ce22116101cd57806357c7ce22146104835780635f10ac30146104a35780636512447d146104b657600080fd5b806347e7ef241461044457806354fd4d501461045757806356d9a2cc1461047057600080fd5b80633631983f116102245780633631983f1461040b57806336881f181461041e578063400aa7ce1461043157600080fd5b80632e1d2f05146103e557806335046722146103f857600080fd5b80631f1f9fd5116102965780632563c64e1161027b5780632563c64e146103ac5780632afe872f146103bf5780632e1a7d4d146103d257600080fd5b80631f1f9fd51461038657806321f7957b1461039957600080fd5b8063053e8349116102c7578063053e834914610335578063154996bb146103555780631be2bd741461036a57600080fd5b80630260d443146102e3578063042e02cf14610312575b600080fd5b6102f66102f1366004614828565b61069c565b604051610309979695949392919061489d565b60405180910390f35b61032561032036600461490f565b610750565b6040519015158152602001610309565b6103486103433660046149b4565b610761565b6040516103099190614a34565b610368610363366004614828565b6107f0565b005b60705467ffffffffffffffff165b604051908152602001610309565b610368610394366004614a7e565b610866565b6103686103a7366004614b25565b610964565b6103786103ba36600461490f565b6109cf565b6103686103cd366004614a7e565b6109ec565b6103686103e0366004614a7e565b610ac9565b6103686103f3366004614828565b610b7b565b61037861040636600461490f565b610ce3565b610368610419366004614c07565b610cf1565b61036861042c366004614c24565b610d54565b61036861043f366004614828565b610e0f565b610368610452366004614ca6565b610f6d565b614e205b60405163ffffffff9091168152602001610309565b61037861047e36600461490f565b610f7b565b61049661049136600461490f565b610f96565b6040516103099190614cd2565b6103686104b1366004614d52565b611022565b6103686104c4366004614c07565b611149565b60675467ffffffffffffffff16610378565b6103686104e9366004614d8b565b6111f2565b610368611422565b610378611488565b61036861050c366004614c07565b61149a565b6103686114fd565b61052c610527366004614828565b611556565b60408051938452602084019290925290820152606001610309565b6033546040516001600160a01b039091168152602001610309565b60665474010000000000000000000000000000000000000000900467ffffffffffffffff16610378565b61032561059a36600461490f565b6001600160a01b03166000908152606d60205260409020600101546c01000000000000000000000000900460ff1690565b6103686105d9366004614da9565b61159b565b61045b6105ec366004614deb565b6116ec565b6103686105ff366004614e5f565b6118aa565b610368610612366004614a7e565b611917565b61045b610625366004614828565b611ae2565b60705468010000000000000000900467ffffffffffffffff16610378565b610368610656366004614b25565b611b6e565b610368610669366004614c07565b611b9c565b61036861067c36600461490f565b611bff565b61037861068f366004614828565b611cde565b610378611d70565b6065546040517f0260d44300000000000000000000000000000000000000000000000000000000815263ffffffff83166004820152606091600091839183918291829182916001600160a01b031690630260d44390602401600060405180830381865afa158015610711573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107399190810190614f00565b959e949d50929b5090995097509550909350915050565b600061075b82611d95565b92915050565b6065546040517f053e83490000000000000000000000000000000000000000000000000000000081526060916001600160a01b03169063053e8349906107ab908590600401614fb9565b600060405180830381865afa1580156107c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075b9190810190614ff0565b806107fa81611dd5565b63ffffffff82166000818152607160209081526040808320805467ffffffffffffffff191681556001810184905560020192909255905191825233917fb5c93858369b86b0bdf3a8c475316d42d2cd139306d28b3d5d4123b9b867455c91015b60405180910390a25050565b6033546001600160a01b031633146108c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6067547fb12de2022a8c992455195d1cdfe49c528c96a325adc99e12b6eab59d56654ea2906109099068010000000000000000900467ffffffffffffffff16611efe565b60408051918252602082018490520160405180910390a1610928611f17565b610930611f47565b61093981611fa3565b606760086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b88886109708282612032565b6109b0338c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061216192505050565b6109c2338c8c8c8c8c8c8c8c8c6122ac565b5050505050505050505050565b600061075b6109dd83612523565b67ffffffffffffffff16611efe565b336000908152606d60205260409020600101546c01000000000000000000000000900460ff16610a48576040517f44fab0e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a523382612787565b610a5b336128ce565b610a6433611d95565b15610a9b576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405133907fd2cad6abfa380a10a84c0e561544f8deb6eea7dd29a411fa306f902aa6ac5eca90600090a250565b610ad281611fa3565b67ffffffffffffffff16610ae533612acc565b67ffffffffffffffff161015610b27576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b38610b3382611fa3565b612bad565b610b4133611d95565b15610b78576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b80610b8581611dd5565b6065546040517fe7b2174800000000000000000000000000000000000000000000000000000000815263ffffffff841660048201526000916001600160a01b03169063e7b2174890602401602060405180830381865afa158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c11919061508a565b9050610c1e836000612d14565b6065546040517f2e1d2f0500000000000000000000000000000000000000000000000000000000815263ffffffff851660048201526001600160a01b0390911690632e1d2f0590602401600060405180830381600087803b158015610c8257600080fd5b505af1158015610c96573d6000803e3d6000fd5b505060405163ffffffff861681526001600160a01b03841692507f10b90e3d042178ee9b3e99a849224b4bf4145b9855274073c0c6bca9c5113b7b915060200160405180910390a2505050565b600061075b6109dd83612acc565b6033546001600160a01b03163314610d4b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b610b7881612dc9565b6000610d606001612e19565b90508015610d9557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610da3878787878787612f70565b8015610e0657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b80610e1981611dd5565b63ffffffff821660009081526071602052604081208054909167ffffffffffffffff9091169003610e76576040517fa6cae01600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010154421080610e8b5750806002015442115b15610ec2576040517f97e4b51800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8054610ed990849067ffffffffffffffff16612d14565b805433907f5e68243d185e61c61d839a6eb781a865dd007c0004b0c1f5f544e4291e7ee96d9085904390610f169067ffffffffffffffff16611efe565b6040805163ffffffff909416845260208401929092529082015260600160405180910390a2505063ffffffff166000908152607160205260408120805467ffffffffffffffff191681556001810182905560020155565b610f778282612787565b5050565b6000610f8682612fc7565b67ffffffffffffffff1692915050565b6065546040517f0e32066a0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526060921690630e32066a90602401600060405180830381865afa158015610ffa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075b91908101906150a7565b6033546001600160a01b0316331461107c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b6065546040517f5f10ac3000000000000000000000000000000000000000000000000000000000815263ffffffff8085166004830152831660248201526001600160a01b0390911690635f10ac3090604401600060405180830381600087803b1580156110e857600080fd5b505af11580156110fc573d6000803e3d6000fd5b50506040805163ffffffff80871682524360208301528516918101919091523392507fc07e279e1b82e9c5a89dc92f0d0fb3ec87c142b3cc1a27411ab82156beef8c36915060600161085a565b6033546001600160a01b031633146111a35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b6119aa67ffffffffffffffff821610156111e9576040517fb4cce01300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b7881613065565b816111fc81611dd5565b8161120e61120982611fa3565b6130e9565b606754612710906112299067ffffffffffffffff1682615187565b6065546040517ff8f08d7f00000000000000000000000000000000000000000000000000000000815263ffffffff881660048201526001600160a01b039091169063f8f08d7f90602401602060405180830381865afa158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b491906151b3565b6112be91906151d0565b6112c8919061522f565b67ffffffffffffffff166112db84611fa3565b67ffffffffffffffff16111561131d576040517f958065d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806060016040528061133185611fa3565b67ffffffffffffffff9081168252607054602090920191611353911642615256565b815260705460209091019067ffffffffffffffff680100000000000000008204811691611381911642615256565b61138b9190615256565b905263ffffffff85166000818152607160209081526040918290208451815467ffffffffffffffff191667ffffffffffffffff909116178155848201516001820155938201516002909401939093558051918252439282019290925290810184905233907f4892696cd76ab5f9fa4578747dee737eb9061eb170dab27ac24d78f47d3eec599060600160405180910390a250505050565b6033546001600160a01b0316331461147c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b611486600061312f565b565b60006114956109dd613199565b905090565b6033546001600160a01b031633146114f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b610b78816131bb565b600061150833612523565b67ffffffffffffffff16111561154a576040517ff457a87800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611486610b3333612acc565b63ffffffff811660009081526071602052604081208054829182916115849067ffffffffffffffff16611efe565b600182015460029092015490969195509350915050565b6000805b63ffffffff8116831115611639576115e284848363ffffffff168181106115c8576115c861526e565b90506020020160208101906115dd919061490f565b61320b565b156116295761161c84848363ffffffff168181106116025761160261526e565b9050602002016020810190611617919061490f565b61325d565b6116269083615187565b91505b6116328161529d565b905061159f565b506066546001600160a01b031663a9059cbb3361165f67ffffffffffffffff8516611efe565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156116c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e691906152c0565b50505050565b6000816116fb61120982611fa3565b6065546001600160a01b031663580ee1b8888833898961171a8a611fa3565b6040518763ffffffff1660e01b815260040161173b96959493929190615306565b6020604051808303816000875af115801561175a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177e919061535a565b6040805160a0810182524380825260006020808401828152848601838152606086019485526080860184815263ffffffff808a16808752606c90955297909420955186559051600186018054925167ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909416921691909117919091179055915160028401555160039092018054929093167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009092169190911790915590925033907f26a77904793977b23eb8b2d412c486276510e0dc1966a4a2936d4bea0ff86e9d898989896118876109dd8b611fa3565b604051611898959493929190615377565b60405180910390a35095945050505050565b81816118b68282612032565b6118be611f17565b6118c733613320565b6119073385858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061216192505050565b61191033612acc565b5050505050565b6033546001600160a01b031633146119715760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b611979613199565b67ffffffffffffffff1661198c82611fa3565b67ffffffffffffffff1611156119ce576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6119d781611fa3565b606b80546000906119f390849067ffffffffffffffff16615187565b825467ffffffffffffffff9182166101009390930a9283029190920219909116179055506066546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa591906152c0565b50604080518281523360208201527f5564de4b05294182a45c60836e9c0ba86d5c351cf1c0db79e4fe5dd04786de1a91015b60405180910390a150565b6065546040517fd379a5f200000000000000000000000000000000000000000000000000000000815263ffffffff831660048201526000916001600160a01b03169063d379a5f290602401602060405180830381865afa158015611b4a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075b919061535a565b611b76611f17565b611b7f33613320565b611b91338a8a8a8a8a8a8a8a8a6122ac565b505050505050505050565b6033546001600160a01b03163314611bf65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b610b78816133d3565b6033546001600160a01b03163314611c595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bc565b6001600160a01b038116611cd55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108bc565b610b788161312f565b6065546040517ff8f08d7f00000000000000000000000000000000000000000000000000000000815263ffffffff8316600482015260009161075b916001600160a01b039091169063f8f08d7f90602401602060405180830381865afa158015611d4c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dd91906151b3565b6067546000906114959068010000000000000000900467ffffffffffffffff16611efe565b6001600160a01b0381166000908152606d60205260408120600101546c01000000000000000000000000900460ff1615801561075b575061075b82613448565b6065546040517fe7b2174800000000000000000000000000000000000000000000000000000000815263ffffffff831660048201526000916001600160a01b03169063e7b2174890602401602060405180830381865afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e61919061508a565b90506001600160a01b038116611ea3576040517fd5528c8600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614801590611ec757506033546001600160a01b03163314155b15610f77576040517fec4de4c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061075b6298968067ffffffffffffffff84166153b1565b611f1f6134a6565b6069805467ffffffffffffffff191667ffffffffffffffff9290921691909117905543606a55565b611f4f613580565b6067805467ffffffffffffffff92909216700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff90921691909117905543606855565b6000611fb262989680836153ee565b156120255760405162461bcd60e51b815260206004820152602560248201527f507265636973696f6e206973206f76657220746865206d6178696d756d20646560448201527f66696e656400000000000000000000000000000000000000000000000000000060648201526084016108bc565b61075b6298968083615402565b6065546040517fc87b30380000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063c87b30389061207e9086908690600401615416565b602060405180830381865afa15801561209b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bf919061508a565b90506001600160a01b038116612101576040517f8791c3b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b0382161480159061212557506033546001600160a01b03163314155b1561215c576040517f11ecf9f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b61216b82826135df565b6065546040517fb2f569c50000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b2f569c5906121b4908490600401614fb9565b600060405180830381600087803b1580156121ce57600080fd5b505af11580156121e2573d6000803e3d6000fd5b505050506001600160a01b0382166000908152606d60205260409020600101546c01000000000000000000000000900460ff16612273576001600160a01b0382166000908152606d6020526040902060010180546008906122549068010000000000000000900463ffffffff1661542a565b91906101000a81548163ffffffff021916908363ffffffff1602179055505b816001600160a01b03167f671ada3835502b9498e4a3116c344293ec3a4ef43f90bb42283d7d66a3f772b28260405161085a9190614fb9565b6065546040517f9b4ddb5d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690639b4ddb5d90612305908d908d908d908d908d908d908d908d908d9060040161555d565b600060405180830381600087803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050506001600160a01b038a166000908152606d6020526040902060018101546c01000000000000000000000000900460ff166123ae5760018101805460089061238f9068010000000000000000900463ffffffff1661529d565b91906101000a81548163ffffffff021916908363ffffffff1602179055505b60005b63ffffffff811688111561247657600089898363ffffffff168181106123d9576123d961526e565b90506020020160208101906123ee9190614828565b90506123f981613743565b60018301546c01000000000000000000000000900460ff1661245b5763ffffffff8082166000908152606c602052604081206003018054909261243c911661529d565b91906101000a81548163ffffffff021916908363ffffffff1602179055505b6124658d8261378b565b5061246f8161529d565b90506123b1565b508115612487576124873383612787565b6124908b611d95565b156124c7576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8a6001600160a01b03167f888b4bb563730efc1c420fb22b503c3551134948a3a3dce4ffab6380e9ce50258b8b8b8b8b8b8b8b60405161250e9897969594939291906155cd565b60405180910390a25050505050505050505050565b6001600160a01b0381166000908152606d60205260408120600101546c01000000000000000000000000900460ff161561255f57506000919050565b60005b6001600160a01b0383166000908152606f602052604090205463ffffffff82161015612605576001600160a01b0383166000908152606f6020526040902080546125e991859163ffffffff85169081106125be576125be61526e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16613797565b6125f39083615187565b91506125fe8161529d565b9050612562565b506067546001600160a01b0383166000908152606d602052604090206001015461264e91680100000000000000009081900467ffffffffffffffff16910463ffffffff166151d0565b6126589082615187565b6065546040517f0dc1eeff0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015292935060009290911690630dc1eeff90602401600060405180830381865afa1580156126c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126e99190810190614ff0565b905060005b81518163ffffffff16101561278057612725828263ffffffff16815181106127185761271861526e565b602002602001015161386c565b67ffffffffffffffff168367ffffffffffffffff1611612749575060009392505050565b612764828263ffffffff16815181106127185761271861526e565b61276e908461562d565b92506127798161529d565b90506126ee565b5050919050565b6066546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156127f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281b91906152c0565b5061282581611fa3565b6001600160a01b0383166000908152606d60205260408120805490919061285790849067ffffffffffffffff16615187565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550336001600160a01b0316826001600160a01b03167fb91f78378ad1ce7b5c12301896eac25f50d4603d0301406595e6fdfa6ffd6419836040516128c291815260200190565b60405180910390a35050565b6128d6611f17565b6128df81613320565b60005b6001600160a01b0382166000908152606f602052604090205463ffffffff82161015612a11576001600160a01b0382166000908152606f60205260408120805463ffffffff84169081106129385761293861526e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905061296981613743565b6001600160a01b0383166000908152606e6020908152604080832063ffffffff85168452909152902061299d81858461391e565b805463ffffffff8381166000908152606c60205260408120600301805470010000000000000000000000000000000090940483169390926129e091859116615656565b92506101000a81548163ffffffff021916908363ffffffff160217905550505080612a0a9061529d565b90506128e2565b506065546040517f45413bf40000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152909116906345413bf490602401600060405180830381600087803b158015612a7257600080fd5b505af1158015612a86573d6000803e3d6000fd5b505050506001600160a01b03166000908152606d6020526040902060010180547fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff169055565b600080612ad883613995565b6001600160a01b0384166000908152606d6020526040902054612b05919067ffffffffffffffff16615187565b90506000612b1284613a88565b6001600160a01b0385166000908152606d6020526040902054612b4b919068010000000000000000900467ffffffffffffffff16615187565b90508067ffffffffffffffff168267ffffffffffffffff161015612b9b576040517f5e13ed3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ba5818361562d565b949350505050565b336000908152606d602052604090208054829190600890612be590849068010000000000000000900467ffffffffffffffff16615187565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550606660009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb33612c438467ffffffffffffffff16611efe565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015612ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cca91906152c0565b50337f233f5518707099d7be7f52de7c8094100dae65f0c896a762ebcc5900370d66bc612d0067ffffffffffffffff8416611efe565b60405190815260200160405180910390a250565b63ffffffff82166000908152606c60205260409020612d3283613c10565b436002820155612d4183613743565b6065546040517f8515736100000000000000000000000000000000000000000000000000000000815263ffffffff8516600482015267ffffffffffffffff841660248201526001600160a01b0390911690638515736190604401600060405180830381600087803b158015612db557600080fd5b505af1158015610e06573d6000803e3d6000fd5b6067805467ffffffffffffffff191667ffffffffffffffff83169081179091556040519081527f65703aa387fec070bf1ec4b824c8faee64d3ad3e45b03c119727391b06d168a790602001611ad7565b60008054610100900460ff1615612eb6578160ff166001148015612e3c5750303b155b612eae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108bc565b506000919050565b60005460ff808416911610612f335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108bc565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b6000612f7c6001612e19565b90508015612fb157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b612fb9613c78565b610da3878787878787613cfe565b6001600160a01b0381166000908152606d602052604081206001015463ffffffff680100000000000000008204169067ffffffffffffffff16613008613580565b613012919061562d565b61301c91906151d0565b6001600160a01b0383166000908152606d602052604090205461075b91907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16615187565b606680547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000067ffffffffffffffff8481168202929092179283905560405192041681527f0ba69538f9785fc112824ff736c1e58ccf880282e09e53d7eef96598e282d3fa90602001611ad7565b6103e867ffffffffffffffff82161015610b78576040517f732f941300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606b5460009067ffffffffffffffff166131b16134a6565b611495919061562d565b6070805467ffffffffffffffff191667ffffffffffffffff83169081179091556040519081527fcaf8245d4ec588ab95e4db438be7dde364ed732720724028fefc713816d5371190602001611ad7565b6001600160a01b0381166000908152606d60205260408120600101546c01000000000000000000000000900460ff1615801561075b5750336001600160a01b038316148061075b575061075b82613448565b600061326882613def565b600061327383612acc565b6001600160a01b0384166000908152606d60205260409020805491925082916010906132be908490700100000000000000000000000000000000900467ffffffffffffffff16615187565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550826001600160a01b03167f4fa857769e6aa8d98c53ea164735f03821828e6672f227ea817ec1e74d61c34360405160405180910390a292915050565b61332981612fc7565b6001600160a01b0382166000908152606d60205260409020805467ffffffffffffffff9290921678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055613395613580565b6001600160a01b03919091166000908152606d60205260409020600101805467ffffffffffffffff191667ffffffffffffffff909216919091179055565b607080547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff8416908102919091179091556040519081527f274c410ee0d5c156c7b7a46ff059b0df2394a5943e30bca4d54f01fb78a91c0790602001611ad7565b600061345382612523565b606654613482919074010000000000000000000000000000000000000000900467ffffffffffffffff166151d0565b67ffffffffffffffff1661349583612acc565b67ffffffffffffffff161092915050565b600080606560009054906101000a90046001600160a01b03166001600160a01b0316632340e8d36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613520919061535a565b63ffffffff16606760089054906101000a900467ffffffffffffffff1667ffffffffffffffff16606a54436135559190615675565b61355f91906153b1565b61356991906153b1565b60695461075b919067ffffffffffffffff16615256565b60675460685460009168010000000000000000900467ffffffffffffffff16906135aa9043615675565b6135b491906151d0565b6067546114959190700100000000000000000000000000000000900467ffffffffffffffff16615187565b6065546040517f053e83490000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063053e834990613629908590600401614fb9565b600060405180830381865afa158015613646573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261366e9190810190614ff0565b905060005b81518163ffffffff1610156116e6576000828263ffffffff168151811061369c5761369c61526e565b602002602001015190506136af81613743565b6001600160a01b0385166000908152606d60205260409020600101546c01000000000000000000000000900460ff166137285763ffffffff8082166000908152606c6020526040812060030180549092613709911661542a565b91906101000a81548163ffffffff021916908363ffffffff1602179055505b6137328582613ffe565b5061373c8161529d565b9050613673565b63ffffffff81166000908152606c602052604090206137618261400a565b60018201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905543905550565b610f778282600161406c565b6001600160a01b038281166000908152606e6020908152604080832063ffffffff86811680865291909352818420805460655493517ff8f08d7f000000000000000000000000000000000000000000000000000000008152600481019390935294959094700100000000000000000000000000000000900490931692919091169063f8f08d7f90602401602060405180830381865afa15801561383e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386291906151b3565b612ba591906151d0565b63ffffffff8181166000818152606c60205260408082206003015460655491517ff8f08d7f0000000000000000000000000000000000000000000000000000000081526004810194909452919391909116916001600160a01b039091169063f8f08d7f90602401602060405180830381865afa1580156138f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391491906151b3565b61075b91906151d0565b61392983838361467a565b835467ffffffffffffffff9190911668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff90911617835561397381614725565b835467ffffffffffffffff191667ffffffffffffffff91909116179092555050565b6065546040517f0dc1eeff0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000928392839290911690630dc1eeff90602401600060405180830381865afa1580156139ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a279190810190614ff0565b905060005b81518163ffffffff161015613a7f57613a63828263ffffffff1681518110613a5657613a5661526e565b602002602001015161400a565b613a6d9084615187565b9250613a788161529d565b9050613a2c565b50909392505050565b600080613a9483612fc7565b6001600160a01b0384166000908152606d6020526040902054613ad59190700100000000000000000000000000000000900467ffffffffffffffff16615187565b905060005b6001600160a01b0384166000908152606f602052604090205463ffffffff82161015613c09576001600160a01b0384166000908152606e60209081526040808320606f9092528220805483919063ffffffff8616908110613b3d57613b3d61526e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020016000209050613beb8186606f6000896001600160a01b03166001600160a01b031681526020019081526020016000208563ffffffff1681548110613bc057613bc061526e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1661467a565b613bf59084615187565b92505080613c029061529d565b9050613ada565b5092915050565b613c1981614725565b63ffffffff9091166000908152606c60205260409020600101805467ffffffffffffffff9290921668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff909216919091179055565b600054610100900460ff16613cf55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108bc565b6114863361312f565b600054610100900460ff16613d7b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108bc565b606580546001600160a01b038089167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556066805492881692909116919091179055613dcc84613065565b613dd583612dc9565b613dde826131bb565b613de7816133d3565b505050505050565b613df7611f17565b613e0081613320565b60005b6001600160a01b0382166000908152606f602052604090205463ffffffff82161015613f32576001600160a01b0382166000908152606f60205260408120805463ffffffff8416908110613e5957613e5961526e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050613e8a81613743565b6001600160a01b0383166000908152606e6020908152604080832063ffffffff851684529091529020613ebe81858461391e565b805463ffffffff8381166000908152606c6020526040812060030180547001000000000000000000000000000000009094048316939092613f019185911661568c565b92506101000a81548163ffffffff021916908363ffffffff160217905550505080613f2b9061529d565b9050613e03565b506065546040517f27467a180000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152909116906327467a1890602401600060405180830381600087803b158015613f9357600080fd5b505af1158015613fa7573d6000803e3d6000fd5b5050506001600160a01b039091166000908152606d6020526040902060010180547fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff166c0100000000000000000000000017905550565b610f778282600061406c565b60006140158261386c565b63ffffffff83166000908152606c60205260409020546140359043615675565b61403f91906151d0565b63ffffffff83166000908152606c602052604090206001015461075b919067ffffffffffffffff16615187565b6001600160a01b0383166000908152606e6020908152604080832063ffffffff86168452909152902080547801000000000000000000000000000000000000000000000000900460ff1615614451576140c681858561391e565b811561411957805481906010906140f690700100000000000000000000000000000000900463ffffffff1661529d565b91906101000a81548163ffffffff021916908363ffffffff1602179055506116e6565b8054819060109061414390700100000000000000000000000000000000900463ffffffff1661542a565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff1660000361444c5780546001600160a01b0385166000908152606d60205260409020805467ffffffffffffffff680100000000000000009093048316926010916141c5918591700100000000000000000000000000000000900416615187565b825467ffffffffffffffff9182166101009390930a9283029190920219909116179055506001600160a01b0384166000908152606f60205260409020805461420f90600190615675565b8154811061421f5761421f61526e565b600091825260208083206008830401546001600160a01b0388168452606f90915260409092208354815460079093166004026101000a90930463ffffffff908116939192740100000000000000000000000000000000000000009092041690811061428c5761428c61526e565b600091825260208083206008830401805460079093166004026101000a63ffffffff81810219909416958416029490941790935583546001600160a01b0388168352606e84526040808420606f909552832080547401000000000000000000000000000000000000000090920490921693929190849081106143105761431061526e565b6000918252602080832060088304015463ffffffff60046007909416939093026101000a900482168452838101949094526040928301822080549590911674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909516949094179093556001600160a01b0387168352606f90915290208054806143b2576143b26156a9565b6000828152602080822060087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90940193840401805463ffffffff600460078716026101000a810219909116909155929093556001600160a01b0387168152606e83526040808220928716825291909252902080547fffffffffffffff000000000000000000000000000000000000000000000000001690555b6116e6565b6001600160a01b0384166000908152606f6020526040902054603210156144a4576040517f9722180300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052806144b885614725565b67ffffffffffffffff908116825260006020808401829052600160408086018290526001600160a01b038b16808552606f808552828620805463ffffffff9081166060808c019190915260809a8b01879052938852606e87528488208e8216808a529088528589208c5181548e8b0151988f0151978f01519e909d015115157801000000000000000000000000000000000000000000000000027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff9e851674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff98861670010000000000000000000000000000000002989098167fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff998e1668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909f1692909d16919091179c909c1796909616999099179390931799909916979097179091559482528554908101865594825290206008840401805460046007909516949094026101000a918202919092021990921691909117905550505050565b6001600160a01b0382166000908152606d60205260408120600101546c01000000000000000000000000900460ff166146f657835463ffffffff7001000000000000000000000000000000008204169067ffffffffffffffff166146dd84614725565b6146e7919061562d565b6146f191906151d0565b6146f9565b60005b845461471b919068010000000000000000900467ffffffffffffffff16615187565b90505b9392505050565b63ffffffff81166000908152606c60205260408120600201546147489043615675565b6065546040517ff8f08d7f00000000000000000000000000000000000000000000000000000000815263ffffffff851660048201526001600160a01b039091169063f8f08d7f90602401602060405180830381865afa1580156147af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147d391906151b3565b6147dd91906151d0565b63ffffffff83166000908152606c602052604090206001015461075b919068010000000000000000900467ffffffffffffffff16615187565b63ffffffff81168114610b7857600080fd5b60006020828403121561483a57600080fd5b813561471e81614816565b60005b83811015614860578181015183820152602001614848565b838111156116e65750506000910152565b60008151808452614889816020860160208601614845565b601f01601f19169290920160200192915050565b60e0815260006148b060e083018a614871565b6001600160a01b038916602084015282810360408401526148d18189614871565b9150508560608301528460808301528360a083015282151560c083015298975050505050505050565b6001600160a01b0381168114610b7857600080fd5b60006020828403121561492157600080fd5b813561471e816148fa565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156149845761498461492c565b604052919050565b600067ffffffffffffffff8211156149a6576149a661492c565b50601f01601f191660200190565b6000602082840312156149c657600080fd5b813567ffffffffffffffff8111156149dd57600080fd5b8201601f810184136149ee57600080fd5b8035614a016149fc8261498c565b61495b565b818152856020838501011115614a1657600080fd5b81602084016020830137600091810160200191909152949350505050565b6020808252825182820181905260009190848201906040850190845b81811015614a7257835163ffffffff1683529284019291840191600101614a50565b50909695505050505050565b600060208284031215614a9057600080fd5b5035919050565b60008083601f840112614aa957600080fd5b50813567ffffffffffffffff811115614ac157600080fd5b602083019150836020828501011115614ad957600080fd5b9250929050565b60008083601f840112614af257600080fd5b50813567ffffffffffffffff811115614b0a57600080fd5b6020830191508360208260051b8501011115614ad957600080fd5b600080600080600080600080600060a08a8c031215614b4357600080fd5b893567ffffffffffffffff80821115614b5b57600080fd5b614b678d838e01614a97565b909b50995060208c0135915080821115614b8057600080fd5b614b8c8d838e01614ae0565b909950975060408c0135915080821115614ba557600080fd5b614bb18d838e01614ae0565b909750955060608c0135915080821115614bca57600080fd5b50614bd78c828d01614ae0565b9a9d999c50979a9699959894979660800135949350505050565b67ffffffffffffffff81168114610b7857600080fd5b600060208284031215614c1957600080fd5b813561471e81614bf1565b60008060008060008060c08789031215614c3d57600080fd5b8635614c48816148fa565b95506020870135614c58816148fa565b94506040870135614c6881614bf1565b93506060870135614c7881614bf1565b92506080870135614c8881614bf1565b915060a0870135614c9881614bf1565b809150509295509295509295565b60008060408385031215614cb957600080fd5b8235614cc4816148fa565b946020939093013593505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614d45577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452614d33858351614871565b94509285019290850190600101614cf9565b5092979650505050505050565b60008060408385031215614d6557600080fd5b8235614d7081614816565b91506020830135614d8081614816565b809150509250929050565b60008060408385031215614d9e57600080fd5b8235614cc481614816565b60008060208385031215614dbc57600080fd5b823567ffffffffffffffff811115614dd357600080fd5b614ddf85828601614ae0565b90969095509350505050565b600080600080600060608688031215614e0357600080fd5b853567ffffffffffffffff80821115614e1b57600080fd5b614e2789838a01614a97565b90975095506020880135915080821115614e4057600080fd5b50614e4d88828901614a97565b96999598509660400135949350505050565b60008060208385031215614e7257600080fd5b823567ffffffffffffffff811115614e8957600080fd5b614ddf85828601614a97565b6000614ea36149fc8461498c565b9050828152838383011115614eb757600080fd5b61471e836020830184614845565b8051612f6b816148fa565b600082601f830112614ee157600080fd5b61471e83835160208501614e95565b80518015158114612f6b57600080fd5b600080600080600080600060e0888a031215614f1b57600080fd5b875167ffffffffffffffff80821115614f3357600080fd5b818a0191508a601f830112614f4757600080fd5b614f568b835160208501614e95565b9850614f6460208b01614ec5565b975060408a0151915080821115614f7a57600080fd5b50614f878a828b01614ed0565b955050606088015193506080880151925060a08801519150614fab60c08901614ef0565b905092959891949750929550565b60208152600061471e6020830184614871565b600067ffffffffffffffff821115614fe657614fe661492c565b5060051b60200190565b6000602080838503121561500357600080fd5b825167ffffffffffffffff81111561501a57600080fd5b8301601f8101851361502b57600080fd5b80516150396149fc82614fcc565b81815260059190911b8201830190838101908783111561505857600080fd5b928401925b8284101561507f57835161507081614816565b8252928401929084019061505d565b979650505050505050565b60006020828403121561509c57600080fd5b815161471e816148fa565b600060208083850312156150ba57600080fd5b825167ffffffffffffffff808211156150d257600080fd5b818501915085601f8301126150e657600080fd5b81516150f46149fc82614fcc565b81815260059190911b8301840190848101908883111561511357600080fd5b8585015b8381101561514b5780518581111561512f5760008081fd5b61513d8b89838a0101614ed0565b845250918601918601615117565b5098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff8083168185168083038211156151aa576151aa615158565b01949350505050565b6000602082840312156151c557600080fd5b815161471e81614bf1565b600067ffffffffffffffff808316818516818304811182151516156151f7576151f7615158565b02949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600067ffffffffffffffff8084168061524a5761524a615200565b92169190910492915050565b6000821982111561526957615269615158565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600063ffffffff8083168181036152b6576152b6615158565b6001019392505050565b6000602082840312156152d257600080fd5b61471e82614ef0565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60808152600061531a60808301888a6152db565b6001600160a01b0387166020840152828103604084015261533c8186886152db565b91505067ffffffffffffffff83166060830152979650505050505050565b60006020828403121561536c57600080fd5b815161471e81614816565b60608152600061538b6060830187896152db565b828103602084015261539e8186886152db565b9150508260408301529695505050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156153e9576153e9615158565b500290565b6000826153fd576153fd615200565b500690565b60008261541157615411615200565b500490565b60208152600061471b6020830184866152db565b600063ffffffff82168061544057615440615158565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b8183526000602080850194508260005b858110156154a357813561548b81614816565b63ffffffff1687529582019590820190600101615478565b509495945050505050565b81835260006020808501808196508560051b810191508460005b8781101561555057828403895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe188360301811261550757600080fd5b8701803567ffffffffffffffff81111561552057600080fd5b80360389131561552f57600080fd5b61553c86828985016152db565b9a87019a95505050908401906001016154c8565b5091979650505050505050565b6001600160a01b038a16815260a06020820152600061558060a083018a8c6152db565b828103604084015261559381898b615468565b905082810360608401526155a88187896154ae565b905082810360808401526155bd8185876154ae565b9c9b505050505050505050505050565b6080815260006155e1608083018a8c6152db565b82810360208401526155f481898b615468565b905082810360408401526156098187896154ae565b9050828103606084015261561e8185876154ae565b9b9a5050505050505050505050565b600067ffffffffffffffff8381169083168181101561564e5761564e615158565b039392505050565b600063ffffffff8083168185168083038211156151aa576151aa615158565b60008282101561568757615687615158565b500390565b600063ffffffff8381169083168181101561564e5761564e615158565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122099d141bc7d9391020965584bd40efe2c049e1df57276f076674cbb6ab83eaa1864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addressNetworkFee(address)": {
        "details": "See {ISSVNetwork-addressNetworkFee}."
      },
      "declareOperatorFee(uint32,uint256)": {
        "details": "Set operator's fee change request by public key.",
        "params": {
          "operatorFee": "The operator's updated fee.",
          "operatorId": "Operator's id."
        }
      },
      "getAddressBalance(address)": {
        "details": "Gets total balance for an owner.",
        "params": {
          "ownerAddress": "Owner's address."
        }
      },
      "getAddressBurnRate(address)": {
        "details": "Returns the burn rate of an owner, returns 0 if negative.",
        "params": {
          "ownerAddress": "Owner's address."
        }
      },
      "getLiquidationThresholdPeriod()": {
        "details": "Returns the number of blocks left for an owner before they can be liquidated."
      },
      "getNetworkEarnings()": {
        "details": "Gets the available network earnings"
      },
      "getNetworkFee()": {
        "details": "Returns the network fee."
      },
      "getOperatorById(uint32)": {
        "details": "See {ISSVNetwork-getOperatorById}."
      },
      "getOperatorFee(uint32)": {
        "details": "See {ISSVNetwork-getOperatorFee}."
      },
      "getOperatorFeeIncreaseLimit()": {
        "details": "Returns the maximum fee increase in pecentage"
      },
      "getOperatorsByValidator(bytes)": {
        "details": "See {ISSVNetwork-getOperatorsByValidator}."
      },
      "getValidatorsByOwnerAddress(address)": {
        "details": "See {ISSVNetwork-getValidatorsByAddress}."
      },
      "initialize(address,address,uint64,uint64,uint64,uint64)": {
        "details": "Initializes the contract.",
        "params": {
          "declareOperatorFeePeriod_": "The period an operator needs to wait before they can approve their fee.",
          "executeOperatorFeePeriod_": "The length of the period in which an operator can approve their fee.",
          "minimumBlocksBeforeLiquidation_": "The minimum blocks before liquidation.",
          "registryAddress_": "The registry address.",
          "token_": "The network token."
        }
      },
      "isLiquidatable(address)": {
        "details": "Check if an owner is liquidatable.",
        "params": {
          "ownerAddress": "Owner's address."
        }
      },
      "liquidate(address[])": {
        "details": "Liquidates multiple owners.",
        "params": {
          "ownerAddresses": "Owners' addresses."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reactivateAccount(uint256)": {
        "details": "Enables msg.sender account.",
        "params": {
          "amount": "Tokens amount."
        }
      },
      "registerOperator(string,bytes,uint256)": {
        "details": "See {ISSVNetwork-registerOperator}."
      },
      "registerValidator(bytes,uint32[],bytes[],bytes[],uint256)": {
        "details": "See {ISSVNetwork-registerValidator}."
      },
      "removeOperator(uint32)": {
        "details": "See {ISSVNetwork-removeOperator}."
      },
      "removeValidator(bytes)": {
        "details": "See {ISSVNetwork-removeValidator}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateLiquidationThresholdPeriod(uint64)": {
        "details": "Updates the number of blocks left for an owner before they can be liquidated.",
        "params": {
          "blocks": "The new value."
        }
      },
      "updateNetworkFee(uint256)": {
        "details": "See {ISSVNetwork-updateNetworkFee}."
      },
      "updateOperatorFeeIncreaseLimit(uint64)": {
        "details": "Updates the maximum fee increase in pecentage.",
        "params": {
          "newOperatorMaxFeeIncrease": "The new value."
        }
      },
      "updateOperatorScore(uint32,uint32)": {
        "details": "Updates operator's score by public key.",
        "params": {
          "operatorId": "Operator's id.",
          "score": "The operators's updated score."
        }
      },
      "updateValidator(bytes,uint32[],bytes[],bytes[],uint256)": {
        "details": "See {ISSVNetwork-updateValidator}."
      },
      "withdrawAll()": {
        "details": "Withdraw total balance to the sender, deactivating their validators if necessary."
      },
      "withdrawNetworkEarnings(uint256)": {
        "details": "Withdraws network fees.",
        "params": {
          "amount": "Amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ValidatorWithPublicKeyNotExist()": [
        {
          "notice": "errors "
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 549,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2199,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_ssvRegistryContract",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(ISSVRegistry)2133"
      },
      {
        "astId": 2202,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_token",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IERC20)1319"
      },
      {
        "astId": 2204,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_minimumBlocksBeforeLiquidation",
        "offset": 20,
        "slot": "102",
        "type": "t_uint64"
      },
      {
        "astId": 2206,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_operatorMaxFeeIncrease",
        "offset": 0,
        "slot": "103",
        "type": "t_uint64"
      },
      {
        "astId": 2208,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_networkFee",
        "offset": 8,
        "slot": "103",
        "type": "t_uint64"
      },
      {
        "astId": 2210,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_networkFeeIndex",
        "offset": 16,
        "slot": "103",
        "type": "t_uint64"
      },
      {
        "astId": 2212,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_networkFeeIndexBlockNumber",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 2214,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_networkEarnings",
        "offset": 0,
        "slot": "105",
        "type": "t_uint64"
      },
      {
        "astId": 2216,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_networkEarningsBlockNumber",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 2218,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_withdrawnFromTreasury",
        "offset": 0,
        "slot": "107",
        "type": "t_uint64"
      },
      {
        "astId": 2223,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_operatorDatas",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_uint32,t_struct(OperatorData)2163_storage)"
      },
      {
        "astId": 2228,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_owners",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_struct(OwnerData)2178_storage)"
      },
      {
        "astId": 2235,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_operatorsInUseByAddress",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(OperatorInUse)2189_storage))"
      },
      {
        "astId": 2240,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_operatorsInUseList",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_array(t_uint32)dyn_storage)"
      },
      {
        "astId": 2242,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_declareOperatorFeePeriod",
        "offset": 0,
        "slot": "112",
        "type": "t_uint64"
      },
      {
        "astId": 2244,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_executeOperatorFeePeriod",
        "offset": 8,
        "slot": "112",
        "type": "t_uint64"
      },
      {
        "astId": 2249,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "_feeChangeRequests",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_uint32,t_struct(FeeChangeRequest)2196_storage)"
      },
      {
        "astId": 4789,
        "contract": "contracts/SSVNetwork.sol:SSVNetwork",
        "label": "______gap",
        "offset": 0,
        "slot": "114",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1319": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISSVRegistry)2133": {
        "encoding": "inplace",
        "label": "contract ISSVRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint32)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(OperatorInUse)2189_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct SSVNetwork.OperatorInUse))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(OperatorInUse)2189_storage)"
      },
      "t_mapping(t_address,t_struct(OwnerData)2178_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SSVNetwork.OwnerData)",
        "numberOfBytes": "32",
        "value": "t_struct(OwnerData)2178_storage"
      },
      "t_mapping(t_uint32,t_struct(FeeChangeRequest)2196_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct SSVNetwork.FeeChangeRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeChangeRequest)2196_storage"
      },
      "t_mapping(t_uint32,t_struct(OperatorData)2163_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct SSVNetwork.OperatorData)",
        "numberOfBytes": "32",
        "value": "t_struct(OperatorData)2163_storage"
      },
      "t_mapping(t_uint32,t_struct(OperatorInUse)2189_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct SSVNetwork.OperatorInUse)",
        "numberOfBytes": "32",
        "value": "t_struct(OperatorInUse)2189_storage"
      },
      "t_struct(FeeChangeRequest)2196_storage": {
        "encoding": "inplace",
        "label": "struct SSVNetwork.FeeChangeRequest",
        "members": [
          {
            "astId": 2191,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "fee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2193,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "approvalBeginTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2195,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "approvalEndTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(OperatorData)2163_storage": {
        "encoding": "inplace",
        "label": "struct SSVNetwork.OperatorData",
        "members": [
          {
            "astId": 2154,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2156,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "earnings",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 2158,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "index",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 2160,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "indexBlockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2162,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "activeValidatorCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(OperatorInUse)2189_storage": {
        "encoding": "inplace",
        "label": "struct SSVNetwork.OperatorInUse",
        "members": [
          {
            "astId": 2180,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2182,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "used",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2184,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "validatorCount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2186,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "indexInArray",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2188,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "exists",
            "offset": 24,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OwnerData)2178_storage": {
        "encoding": "inplace",
        "label": "struct SSVNetwork.OwnerData",
        "members": [
          {
            "astId": 2165,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "deposited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2167,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "withdrawn",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2169,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "used",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2171,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "networkFee",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2173,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "networkFeeIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 2175,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "activeValidatorCount",
            "offset": 8,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 2177,
            "contract": "contracts/SSVNetwork.sol:SSVNetwork",
            "label": "validatorsDisabled",
            "offset": 12,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}